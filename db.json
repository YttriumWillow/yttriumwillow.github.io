{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","path":"js/column.js","modified":0,"renderable":1},{"_id":"source/img/kk.png","path":"img/kk.png","modified":0,"renderable":0},{"_id":"source/img/nggu.png","path":"img/nggu.png","modified":0,"renderable":0},{"_id":"source/gallery/covers/20231026.jpg","path":"gallery/covers/20231026.jpg","modified":0,"renderable":0},{"_id":"source/gallery/covers/20231029-1.jpg","path":"gallery/covers/20231029-1.jpg","modified":0,"renderable":0},{"_id":"source/gallery/covers/20231029-2.jpg","path":"gallery/covers/20231029-2.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/20231026.jpg","path":"gallery/thumbnails/20231026.jpg","modified":0,"renderable":0},{"_id":"source/gallery/covers/20231104-1.jpg","path":"gallery/covers/20231104-1.jpg","modified":0,"renderable":0},{"_id":"source/gallery/covers/20231102-2.jpg","path":"gallery/covers/20231102-2.jpg","modified":0,"renderable":0},{"_id":"source/gallery/covers/20231102-1.jpg","path":"gallery/covers/20231102-1.jpg","modified":0,"renderable":0},{"_id":"source/img/20231104/your-github-displays.png","path":"img/20231104/your-github-displays.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/.obsidian/appearance.json","hash":"9439122150a0431e432676115220bc925af96094","modified":1701247473765},{"_id":"source/.obsidian/app.json","hash":"0f285b534318ec6420714e235f8d6cb3541d8907","modified":1701247473762},{"_id":"source/.obsidian/community-plugins.json","hash":"97d170e1550eee4afc0af065b78cda302a97674c","modified":1699140013398},{"_id":"source/.obsidian/core-plugins.json","hash":"eb138d03157a06efdb791f441be97c256aca472c","modified":1701247473299},{"_id":"source/.obsidian/core-plugins-migration.json","hash":"688b44c61ce85d9ac421b1a310a72c1348bc9b51","modified":1701247473301},{"_id":"source/.obsidian/hotkeys.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1699065484251},{"_id":"source/.obsidian/workspace.json","hash":"2d3f73f2ac57c8c7b9c1626ee5c20bc786f06275","modified":1701247511483},{"_id":"source/_posts/Manacher-算法学习笔记.md","hash":"16ba64b8113df64bfd7a7b6831664e169e3a3ffa","modified":1701507110321},{"_id":"source/_posts/P5377-THUPC2019-鸽鸽的分割-题解.md","hash":"ccab4b143200c4693a224e4293436a9202c38954","modified":1701507116797},{"_id":"source/_posts/P9816-少项式复合幂-题解.md","hash":"a42639f7106378a456f96ed6be45f50f530ccdc6","modified":1701507122222},{"_id":"source/_posts/公式渲染压力测试.md","hash":"ae43289cb1f79c9b498cbb402922f95c968c4afc","modified":1701246955311},{"_id":"source/_posts/Test-Article.md","hash":"5a49f4f70802ece947c41baaba7d978fc56c41c9","modified":1699095205707},{"_id":"source/_posts/hello-world.md","hash":"302e2e7bd7406aea2bd8086ebb37a9d21e68e195","modified":1699095183814},{"_id":"source/_posts/在随便哪一台电脑上写博客？Hexo-多端同步.md","hash":"1dbad86b9af8bcc7c54dd4c771892e21138430fd","modified":1701507128913},{"_id":"source/img/nggu.png","hash":"c68448c3506d2d70af6b1cc76ad06d0e1fe3d0aa","modified":1698323185802},{"_id":"source/_posts/通用快读快写模板.md","hash":"d255f1dc3576e73606e926dea4a956466dbd599c","modified":1701507819288},{"_id":"source/gallery/covers/20231029-1.jpg","hash":"eb0ad06dac7556ceab45148e3b4345c4cdbcdb24","modified":1698561515600},{"_id":"source/gallery/covers/20231029-2.jpg","hash":"d5293dbb1135fabef039debb895b153b0eaffd0b","modified":1698561523574},{"_id":"source/img/20231104/your-github-displays.png","hash":"088ab7c59524606943ff0d6818d1a8358bab1ba2","modified":1699068039764},{"_id":"source/.obsidian/plugins/cm-editor-syntax-highlight-obsidian/styles.css","hash":"bf4c2be6551315ccdc8afd273712309e804bd85f","modified":1699067982860},{"_id":"source/.obsidian/plugins/cm-editor-syntax-highlight-obsidian/manifest.json","hash":"d6aa6760155722fc07c7af078b2ffdfc76ec56dc","modified":1699067676021},{"_id":"source/.obsidian/plugins/obsidian-wakatime/manifest.json","hash":"9a9fa112e129db337dcaef9e6fd7b9ed86b3137e","modified":1699067786245},{"_id":"source/.obsidian/plugins/obsidian-wakatime/styles.css","hash":"aed35f79cb93cc0f255b71bd99202f5eed002d5d","modified":1699068178162},{"_id":"node_modules/hexo-theme-icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1701075564641},{"_id":"node_modules/hexo-theme-icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1701075564641},{"_id":"node_modules/hexo-theme-icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1701075564642},{"_id":"node_modules/hexo-theme-icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1701075564642},{"_id":"node_modules/hexo-theme-icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1701075564643},{"_id":"node_modules/hexo-theme-icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1701075564636},{"_id":"node_modules/hexo-theme-icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1701075564636},{"_id":"node_modules/hexo-theme-icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1701075564637},{"_id":"node_modules/hexo-theme-icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1701075564638},{"_id":"node_modules/hexo-theme-icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1701075564639},{"_id":"node_modules/hexo-theme-icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1701075564673},{"_id":"node_modules/hexo-theme-icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1701075564644},{"_id":"node_modules/hexo-theme-icarus/package.json","hash":"75db783b805785377db28d4cb844ee65bb7be613","modified":1701075564654},{"_id":"node_modules/hexo-theme-icarus/README.md","hash":"32f9f4fc8cd7ec60b30544bd2e558b593519ae5d","modified":1701075564673},{"_id":"node_modules/hexo-theme-icarus/include/dependency.js","hash":"0ca35dec92ccf383f45db905db1a5a0e92d7209e","modified":1701075564647},{"_id":"node_modules/hexo-theme-icarus/include/config.js","hash":"1ff0f174e9670074ad2bee890d5b6da486800c9a","modified":1701075564646},{"_id":"node_modules/hexo-theme-icarus/include/register.js","hash":"ec6596b63bfb4349ba61792d905abe8e06fea625","modified":1701075564649},{"_id":"node_modules/hexo-theme-icarus/layout/archive.jsx","hash":"99bf235042d0c57af15d2f108ba5eda77443fea8","modified":1701075564659},{"_id":"node_modules/hexo-theme-icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1701075564660},{"_id":"node_modules/hexo-theme-icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1701075564660},{"_id":"node_modules/hexo-theme-icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1701075564662},{"_id":"node_modules/hexo-theme-icarus/layout/layout.jsx","hash":"760faf9f515e6759a49d575c59c726f2f953aedc","modified":1701502924715},{"_id":"node_modules/hexo-theme-icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1701075564669},{"_id":"node_modules/hexo-theme-icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1701075564670},{"_id":"node_modules/hexo-theme-icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1701075564672},{"_id":"node_modules/hexo-theme-icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1701075564672},{"_id":"node_modules/hexo-theme-icarus/languages/de.yml","hash":"78421f09961ca0b24756a0688fb2cb2e2696e25f","modified":1701075564696},{"_id":"node_modules/hexo-theme-icarus/languages/en.yml","hash":"3d674204d9f723c829226da745afddd180c1131d","modified":1701075564697},{"_id":"node_modules/hexo-theme-icarus/languages/es.yml","hash":"38579b8fad4b6997362acc770615bcd85ff20f68","modified":1701075564697},{"_id":"node_modules/hexo-theme-icarus/languages/id.yml","hash":"5e48b1d62378cadeb64b88349477726a5c1bae47","modified":1701075564698},{"_id":"node_modules/hexo-theme-icarus/languages/fr.yml","hash":"06d5c819d6108a42b28cff7b52e5410d0bed55d1","modified":1701075564697},{"_id":"node_modules/hexo-theme-icarus/languages/ko.yml","hash":"e3374265377809c1518114cf352b595840c0b416","modified":1701075564699},{"_id":"node_modules/hexo-theme-icarus/languages/ja.yml","hash":"801d9930fef48d6a3f80470d5bed4f3eb78147e6","modified":1701075564698},{"_id":"node_modules/hexo-theme-icarus/languages/ru.yml","hash":"9d91358c2acbe7a0f2a25daf7f65b999ff32d068","modified":1701075564700},{"_id":"node_modules/hexo-theme-icarus/languages/pl.yml","hash":"2e7debb44cd91096f30efc87bf8d6b1d0d0214c9","modified":1701075564699},{"_id":"node_modules/hexo-theme-icarus/languages/tk.yml","hash":"ca583168bd2025124a1cd0e977da475d7a7496fd","modified":1701075564701},{"_id":"node_modules/hexo-theme-icarus/languages/pt-BR.yml","hash":"ee8f73350e4c6e2f63b7fc72b34472a6b1e21244","modified":1701075564700},{"_id":"node_modules/hexo-theme-icarus/languages/vn.yml","hash":"5f2fffa642110c81d8f529949711c9d19ad6bbbe","modified":1701075564702},{"_id":"node_modules/hexo-theme-icarus/languages/tr.yml","hash":"dd0a7bfe14848d6e1aa229198fe1db03e08e305e","modified":1701075564701},{"_id":"node_modules/hexo-theme-icarus/languages/zh-CN.yml","hash":"02475ba14afc70dfeaf5678467cee307835e4efa","modified":1701075564702},{"_id":"node_modules/hexo-theme-icarus/scripts/index.js","hash":"58531c6502e9e7e6cb3eb0c3bc34f66e0cc29624","modified":1701500523618},{"_id":"node_modules/hexo-theme-icarus/languages/zh-TW.yml","hash":"a6826e0c8cdb9ad286324b682b466a9e2ad78e6f","modified":1701075564702},{"_id":"node_modules/hexo-theme-icarus/include/migration/head.js","hash":"7189efe33d18927d3790e8afb06642fb293b8603","modified":1701075564648},{"_id":"node_modules/hexo-theme-icarus/include/migration/v4_v5.js","hash":"6342310892d113763b5544789b45d44c0ccf2854","modified":1701075564650},{"_id":"node_modules/hexo-theme-icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":1701075564650},{"_id":"node_modules/hexo-theme-icarus/include/migration/v5_v5.1.js","hash":"073f22bd16e34b56f016633b1676dab2e7d8843d","modified":1701075564651},{"_id":"node_modules/hexo-theme-icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1701075564650},{"_id":"node_modules/hexo-theme-icarus/include/style/article.styl","hash":"105c983871b6c9148d97a0f756886e56411572bd","modified":1701501408904},{"_id":"node_modules/hexo-theme-icarus/include/style/base.styl","hash":"a43590a6b3df55270e16ce84566d05f6bdaa07ac","modified":1701503164318},{"_id":"node_modules/hexo-theme-icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1701075564686},{"_id":"node_modules/hexo-theme-icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1701075564686},{"_id":"node_modules/hexo-theme-icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1701075564688},{"_id":"node_modules/hexo-theme-icarus/include/style/codeblock.styl","hash":"05554d31dd5360da718b8ea1e078eedd87d85aba","modified":1701502419624},{"_id":"node_modules/hexo-theme-icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1701075564688},{"_id":"node_modules/hexo-theme-icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1701075564688},{"_id":"node_modules/hexo-theme-icarus/include/style/navbar.styl","hash":"34f09b144cb46a25ec2cc7260a6c207dd34ff1fe","modified":1701075564689},{"_id":"node_modules/hexo-theme-icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1701075564689},{"_id":"node_modules/hexo-theme-icarus/include/style/responsive.styl","hash":"25992bb9965a11539f0b48a5b57f2f2c5a47eabc","modified":1701502981402},{"_id":"node_modules/hexo-theme-icarus/include/style/plugin.styl","hash":"084843d5a522029e0f84a4fe791fbcb2cabd4c36","modified":1701075564690},{"_id":"node_modules/hexo-theme-icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1701075564690},{"_id":"node_modules/hexo-theme-icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1701075564691},{"_id":"node_modules/hexo-theme-icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":1701075564692},{"_id":"node_modules/hexo-theme-icarus/include/schema/config.json","hash":"f233678cd656c0e300181ca79dd30cb42fc213b3","modified":1701075564653},{"_id":"node_modules/hexo-theme-icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1701075564647},{"_id":"node_modules/hexo-theme-icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":1701075564660},{"_id":"node_modules/hexo-theme-icarus/layout/common/article.jsx","hash":"1d06eee32ea1fcb3162227eb1d7d19be39b6f5e3","modified":1701075564659},{"_id":"node_modules/hexo-theme-icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":1701075564661},{"_id":"node_modules/hexo-theme-icarus/layout/common/footer.jsx","hash":"de966666f1e4ef80e0d15081b2709c3065b246dd","modified":1701075564662},{"_id":"node_modules/hexo-theme-icarus/layout/common/head.jsx","hash":"725109464d390ba044105b946d9e543b74c2c370","modified":1701506833868},{"_id":"node_modules/hexo-theme-icarus/layout/common/navbar.jsx","hash":"d96e501e52861056474659f96ee0206588d8c93a","modified":1701075564668},{"_id":"node_modules/hexo-theme-icarus/layout/common/scripts.jsx","hash":"4816c9099a881b5f7b13af3e42caae36edbffccd","modified":1701075564671},{"_id":"node_modules/hexo-theme-icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":1701075564669},{"_id":"node_modules/hexo-theme-icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":1701075564671},{"_id":"node_modules/hexo-theme-icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":1701075564671},{"_id":"node_modules/hexo-theme-icarus/layout/common/widgets.jsx","hash":"0cd12e491822e62e6e40b49155482e148b37c929","modified":1701502944114},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1701075564657},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":1701075564659},{"_id":"node_modules/hexo-theme-icarus/layout/widget/profile.jsx","hash":"0d3a7fd922c12cc45d2c8d26a8f4d3a9a6ed0ae0","modified":1701075564670},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1701075564687},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1701075564687},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1701075564691},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1701075564674},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1701075564692},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1701075564692},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1701075564684},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1701075564693},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1701075564693},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","hash":"0a8e361c353daa3194f4de3d646b96025d128e1a","modified":1701075564645},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1701075564645},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","hash":"08a2641765eeaf712157ad134dd675e3f7708ae2","modified":1701498856356},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1701075564645},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/article.json","hash":"e2502c39045c6a26ccd8e880858f93e78c7bda35","modified":1701075564652},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/comment.json","hash":"f49270b619f5d2c3decde6b0b5a0c3bbab4b54a5","modified":1701075564652},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1701075564653},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":1701075564654},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/footer.json","hash":"e85c9d7f2579805beb252a1b6345d5a668a13baa","modified":1701075564654},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1701075564654},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":1701075564654},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1701075564655},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1701075564656},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1701075564656},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1701075564656},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/widgets.json","hash":"cadd9dc942740ecd5037d3943e72f8b6a8399bbe","modified":1701075564657},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1701075564651},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1701075564652},{"_id":"node_modules/hexo-theme-icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1701075564655},{"_id":"source/gallery/covers/20231104-1.jpg","hash":"492e400d0b69e8580544f34b1b9a6cd8444f458d","modified":1699098698000},{"_id":"source/img/kk.png","hash":"13298b478b565a4c81787360a612a449b09660a0","modified":1698322942894},{"_id":"source/gallery/covers/20231102-2.jpg","hash":"2f2a5ace59b4acd76164464b376481085a34edf8","modified":1698899272076},{"_id":"source/gallery/covers/20231026.jpg","hash":"577269d488a28f721c6efa83fabba88b536b7bed","modified":1698393065611},{"_id":"source/gallery/thumbnails/20231026.jpg","hash":"577269d488a28f721c6efa83fabba88b536b7bed","modified":1698393065611},{"_id":"source/.obsidian/plugins/obsidian-wakatime/main.js","hash":"7eca3820bee1887b9b531c83869c316579c1b466","modified":1699068175628},{"_id":"source/gallery/covers/20231102-1.jpg","hash":"51c8e08d088bafc80005adb81bae476c812e4f2f","modified":1698899283119},{"_id":"source/.obsidian/plugins/cm-editor-syntax-highlight-obsidian/main.js","hash":"e323a58e8753732f143f3dd453d27f344bc5222f","modified":1699067967053},{"_id":"public/js/algolia.js","hash":"a8df0c0abeeb4ee1d2d720161f3aea7339380704","modified":1701507737158},{"_id":"public/js/google_cse.js","hash":"1a9881669dfdeb2b3214074eee0d3e01e52db2c4","modified":1701507737158},{"_id":"public/js/insight.js","hash":"86bbdb7305d9bf19ad62d2ca2cf169fc8d9f9d31","modified":1701507737158},{"_id":"public/js/toc.js","hash":"da6fb757a1b083b8ed138bf29aad3a7bf8ec4f11","modified":1701507737158},{"_id":"public/content.json","hash":"75d892a8b71c60cdccfa066f2f88e78bf0a8bf99","modified":1701507737158},{"_id":"public/manifest.json","hash":"6e15e56cb3de767645cb2a96e09bacb53dbc8adc","modified":1701507737158},{"_id":"public/2023/11/04/通用快读快写模板/index.html","hash":"834fcada8f9c408410eca249c1aaca0c44122ae0","modified":1701507823589},{"_id":"public/2023/11/04/在随便哪一台电脑上写博客？Hexo-多端同步/index.html","hash":"fda231872f89897e56b42182c076936471b35337","modified":1701507737158},{"_id":"public/2023/11/02/Manacher-算法学习笔记/index.html","hash":"8d76f414ed2d1e218ea2436733ac48849efa383c","modified":1701507737158},{"_id":"public/2023/10/29/P9816-少项式复合幂-题解/index.html","hash":"6887810203acec6ad6707059efaed0d7c4825d63","modified":1701507737158},{"_id":"public/2023/10/27/P5377-THUPC2019-鸽鸽的分割-题解/index.html","hash":"3ebe16be596ddafd1a9d066c683a6d7e30307a47","modified":1701507737158},{"_id":"public/2023/11/29/hello-world/index.html","hash":"3f865f0dc33a2cd578b292079fd6d5a166a45c72","modified":1701507737158},{"_id":"public/2023/10/27/公式渲染压力测试/index.html","hash":"de3f3c2865db9c68ad10d98c29a30d398cc7d107","modified":1701507737158},{"_id":"public/2023/10/26/Test-Article/index.html","hash":"af331759332309f95ffede3a9d2c083766037d63","modified":1701507737158},{"_id":"public/archives/index.html","hash":"fc8b5d251e0d80b0666726cbdf2f8db189c6816f","modified":1701507737158},{"_id":"public/archives/2023/index.html","hash":"0d7dbcd5e530fe4e52bebbe5d9ec01caa445d52b","modified":1701507737158},{"_id":"public/archives/2023/10/index.html","hash":"9cc0811449f636e0b35284d394f210ab52926766","modified":1701507737158},{"_id":"public/archives/2023/11/index.html","hash":"83e519470b54da20eaf245c025e32356a5a97fd1","modified":1701507737158},{"_id":"public/index.html","hash":"7666e1bd689163790f8d3605677584fcae01ffc4","modified":1701507823589},{"_id":"public/categories/OI/index.html","hash":"a7f963e88bf0e82f4bec0a597e05f1b48aeabada","modified":1701507823589},{"_id":"public/categories/博客/index.html","hash":"accf34e3492138b2a7880b5e1a209562af16fbe1","modified":1701507737158},{"_id":"public/tags/OI/index.html","hash":"d76bc3d43a4aa88a1995897ac243436dd6568020","modified":1701507823589},{"_id":"public/tags/博客/index.html","hash":"cb2cb782d6625a30c5a7309079174addf742dd34","modified":1701507737158},{"_id":"public/categories/index.html","hash":"d528b69413d83f9d6e35b043eb44ec4a84039dd1","modified":1701507737158},{"_id":"public/tags/index.html","hash":"5ba6a90ac3c307afcc7250699282d23ea6007ee0","modified":1701507737158},{"_id":"public/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1701507737158},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1701507737158},{"_id":"public/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1701507737158},{"_id":"public/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1701507737158},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1701507737158},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1701507737158},{"_id":"public/img/nggu.png","hash":"c68448c3506d2d70af6b1cc76ad06d0e1fe3d0aa","modified":1701507737158},{"_id":"public/gallery/covers/20231029-1.jpg","hash":"eb0ad06dac7556ceab45148e3b4345c4cdbcdb24","modified":1701507737158},{"_id":"public/gallery/covers/20231029-2.jpg","hash":"d5293dbb1135fabef039debb895b153b0eaffd0b","modified":1701507737158},{"_id":"public/img/20231104/your-github-displays.png","hash":"088ab7c59524606943ff0d6818d1a8358bab1ba2","modified":1701507737158},{"_id":"public/css/cyberpunk.css","hash":"57dc04bf80ee041fb16adae63c31cb14a52aa9d7","modified":1701507737158},{"_id":"public/css/style.css","hash":"8494944538c0fb8243c8059c9f0cba0f9d1cc498","modified":1701507737158},{"_id":"public/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1701507737158},{"_id":"public/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1701507737158},{"_id":"public/css/default.css","hash":"8494944538c0fb8243c8059c9f0cba0f9d1cc498","modified":1701507737158},{"_id":"public/js/main.js","hash":"08a2641765eeaf712157ad134dd675e3f7708ae2","modified":1701507737158},{"_id":"public/js/animation.js","hash":"0a8e361c353daa3194f4de3d646b96025d128e1a","modified":1701507737158},{"_id":"public/gallery/covers/20231104-1.jpg","hash":"492e400d0b69e8580544f34b1b9a6cd8444f458d","modified":1701507737158},{"_id":"public/img/kk.png","hash":"13298b478b565a4c81787360a612a449b09660a0","modified":1701507737158},{"_id":"public/gallery/covers/20231102-2.jpg","hash":"2f2a5ace59b4acd76164464b376481085a34edf8","modified":1701507737158},{"_id":"public/gallery/covers/20231026.jpg","hash":"577269d488a28f721c6efa83fabba88b536b7bed","modified":1701507737158},{"_id":"public/gallery/thumbnails/20231026.jpg","hash":"577269d488a28f721c6efa83fabba88b536b7bed","modified":1701507737158},{"_id":"public/gallery/covers/20231102-1.jpg","hash":"51c8e08d088bafc80005adb81bae476c812e4f2f","modified":1701507737158}],"Category":[{"name":"OI","_id":"clpntrxhb0002h87ef0ue3gjn"},{"name":"Test Pages","_id":"clpntrxhh000dh87e5x3vhkq6"},{"name":"博客","_id":"clpntrxhk000rh87e9mmmcqoz"}],"Data":[],"Page":[],"Post":[{"title":"Manacher 算法学习笔记","date":"2023-11-02T04:26:40.000Z","cover":"/gallery/covers/20231102-1.jpg","toc":true,"_content":"Manacher 算法于 1975 年发明，用其发明者的名字命名。\n\nManacher 是一个线性解决回文子串问题的算法。\n\n<!-- more -->\n\nManacher 算法适用于处理字符串的所有回文子串，而并非只适用于通常意义上的最长回文子串，具体见下文解释。\n\n### 前置知识\n\n考虑如何描述一个字符串里的回文子串。\n\n比较简单的想法是记该子串的左右端点，将其记为 \\\\([l,r]\\\\)。\n然而对于一个回文子串的子串 \\\\([l+d,r-d]\\\\) 它同样是一个回文子串；\n除非我们用较为复杂的方法记录这个回文子串的子串，否则需要用另外的空间来描述和储存，这造成了浪费。\n\n另一个利用回文串性质的记法是记录其对称中心和对称长度。\n例如对于字符串 `DBABCBAB` 中的子串 `ABCBC`，我们就可以记其为 \\\\([5,3]\\\\)。\n\n对于偶数长度的回文串，我们考虑在每两个字符间插入一个字符，例如 `#`。\n同时我们要在头尾插入一些指示字符，辅助下面算法的判断。\n例如把上面的串变成：`$D#B#A#B#C#B#A#B`。\n\n通过上述记法结合回文串性质可以发现 \\\\([5,2]$,$[5,1]\\\\) 均为回文子串。\n我们就可以小改以上这个记法为记录其对称中心和最大对称长度。\n也就是说 \\\\([5,3]\\\\) 可以说明以 \\\\(5\\\\) 为对称中心实际上存在 \\\\(3\\\\) 个回文子串。\n\nManacher 可以用 \\\\(O(n)\\\\) 的复杂度求出每一个对称中心的最长对称长度。\n因此，之前说有人对该算法存在误解，其实我们是可以知道所有回文子串的。\n\n### 算法\n\n考虑一个中心扩展算法。\n\nUnfixed\n","source":"_posts/Manacher-算法学习笔记.md","raw":"---\ntitle: Manacher 算法学习笔记\ndate: 2023-11-02 12:26:40\ncover: /gallery/covers/20231102-1.jpg\ncategories: OI\ntags:\n  - OI\ntoc: true\n---\nManacher 算法于 1975 年发明，用其发明者的名字命名。\n\nManacher 是一个线性解决回文子串问题的算法。\n\n<!-- more -->\n\nManacher 算法适用于处理字符串的所有回文子串，而并非只适用于通常意义上的最长回文子串，具体见下文解释。\n\n### 前置知识\n\n考虑如何描述一个字符串里的回文子串。\n\n比较简单的想法是记该子串的左右端点，将其记为 \\\\([l,r]\\\\)。\n然而对于一个回文子串的子串 \\\\([l+d,r-d]\\\\) 它同样是一个回文子串；\n除非我们用较为复杂的方法记录这个回文子串的子串，否则需要用另外的空间来描述和储存，这造成了浪费。\n\n另一个利用回文串性质的记法是记录其对称中心和对称长度。\n例如对于字符串 `DBABCBAB` 中的子串 `ABCBC`，我们就可以记其为 \\\\([5,3]\\\\)。\n\n对于偶数长度的回文串，我们考虑在每两个字符间插入一个字符，例如 `#`。\n同时我们要在头尾插入一些指示字符，辅助下面算法的判断。\n例如把上面的串变成：`$D#B#A#B#C#B#A#B`。\n\n通过上述记法结合回文串性质可以发现 \\\\([5,2]$,$[5,1]\\\\) 均为回文子串。\n我们就可以小改以上这个记法为记录其对称中心和最大对称长度。\n也就是说 \\\\([5,3]\\\\) 可以说明以 \\\\(5\\\\) 为对称中心实际上存在 \\\\(3\\\\) 个回文子串。\n\nManacher 可以用 \\\\(O(n)\\\\) 的复杂度求出每一个对称中心的最长对称长度。\n因此，之前说有人对该算法存在误解，其实我们是可以知道所有回文子串的。\n\n### 算法\n\n考虑一个中心扩展算法。\n\nUnfixed\n","slug":"Manacher-算法学习笔记","published":1,"updated":"2023-12-02T08:51:50.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpntrxh70000h87e8uj1gyr2","content":"<p>Manacher 算法于 1975 年发明，用其发明者的名字命名。</p>\n<p>Manacher 是一个线性解决回文子串问题的算法。</p>\n<span id=\"more\"></span>\n\n<p>Manacher 算法适用于处理字符串的所有回文子串，而并非只适用于通常意义上的最长回文子串，具体见下文解释。</p>\n<h3 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h3><p>考虑如何描述一个字符串里的回文子串。</p>\n<p>比较简单的想法是记该子串的左右端点，将其记为 \\([l,r]\\)。<br>然而对于一个回文子串的子串 \\([l+d,r-d]\\) 它同样是一个回文子串；<br>除非我们用较为复杂的方法记录这个回文子串的子串，否则需要用另外的空间来描述和储存，这造成了浪费。</p>\n<p>另一个利用回文串性质的记法是记录其对称中心和对称长度。<br>例如对于字符串 <code>DBABCBAB</code> 中的子串 <code>ABCBC</code>，我们就可以记其为 \\([5,3]\\)。</p>\n<p>对于偶数长度的回文串，我们考虑在每两个字符间插入一个字符，例如 <code>#</code>。<br>同时我们要在头尾插入一些指示字符，辅助下面算法的判断。<br>例如把上面的串变成：<code>$D#B#A#B#C#B#A#B</code>。</p>\n<p>通过上述记法结合回文串性质可以发现 \\([5,2]$,$[5,1]\\) 均为回文子串。<br>我们就可以小改以上这个记法为记录其对称中心和最大对称长度。<br>也就是说 \\([5,3]\\) 可以说明以 \\(5\\) 为对称中心实际上存在 \\(3\\) 个回文子串。</p>\n<p>Manacher 可以用 \\(O(n)\\) 的复杂度求出每一个对称中心的最长对称长度。<br>因此，之前说有人对该算法存在误解，其实我们是可以知道所有回文子串的。</p>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><p>考虑一个中心扩展算法。</p>\n<p>Unfixed</p>\n","site":{"data":{}},"excerpt":"<p>Manacher 算法于 1975 年发明，用其发明者的名字命名。</p>\n<p>Manacher 是一个线性解决回文子串问题的算法。</p>","more":"<p>Manacher 算法适用于处理字符串的所有回文子串，而并非只适用于通常意义上的最长回文子串，具体见下文解释。</p>\n<h3 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h3><p>考虑如何描述一个字符串里的回文子串。</p>\n<p>比较简单的想法是记该子串的左右端点，将其记为 \\([l,r]\\)。<br>然而对于一个回文子串的子串 \\([l+d,r-d]\\) 它同样是一个回文子串；<br>除非我们用较为复杂的方法记录这个回文子串的子串，否则需要用另外的空间来描述和储存，这造成了浪费。</p>\n<p>另一个利用回文串性质的记法是记录其对称中心和对称长度。<br>例如对于字符串 <code>DBABCBAB</code> 中的子串 <code>ABCBC</code>，我们就可以记其为 \\([5,3]\\)。</p>\n<p>对于偶数长度的回文串，我们考虑在每两个字符间插入一个字符，例如 <code>#</code>。<br>同时我们要在头尾插入一些指示字符，辅助下面算法的判断。<br>例如把上面的串变成：<code>$D#B#A#B#C#B#A#B</code>。</p>\n<p>通过上述记法结合回文串性质可以发现 \\([5,2]$,$[5,1]\\) 均为回文子串。<br>我们就可以小改以上这个记法为记录其对称中心和最大对称长度。<br>也就是说 \\([5,3]\\) 可以说明以 \\(5\\) 为对称中心实际上存在 \\(3\\) 个回文子串。</p>\n<p>Manacher 可以用 \\(O(n)\\) 的复杂度求出每一个对称中心的最长对称长度。<br>因此，之前说有人对该算法存在误解，其实我们是可以知道所有回文子串的。</p>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><p>考虑一个中心扩展算法。</p>\n<p>Unfixed</p>"},{"title":"P5377 [THUPC2019] 鸽鸽的分割 题解","date":"2023-10-27T13:06:27.000Z","toc":true,"katex":true,"_content":"### 简要题意\n\n连结圆上 \\\\(n\\\\) 个点，求最多能够把圆分成几个部分。\n\n<!-- more -->\n\n### 前置知识\n\n欧拉公式：\\\\(F(ace)=E(dge) - V(ertex)+2\\\\)\n\n人话：\\\\(\\text{多边形面数} = \\text{边数} - \\text{顶点数} + 2\\\\)\n\n### 思路\n\n将一个圆折叠成一个多面体，你可以进行一些奇妙的空间变换来达到这一点。\n\n那么我们最后会多出一个底面。\n\n因此在我们的这个圆中 \\\\(F(n)=E-V+1\\\\)\n\n#### 求 \\\\(V\\\\)\n\n圆上已经有了 \\\\(n\\\\) 个点。我们要使得圆内不存在三线共点的情况。\n\n那么考虑每次选择四个顶点画出一个四边形的两条对角线。\n\n于是又会生成 \\\\(C_{n}^{4}\\\\) 个顶点。可以证明已经考虑完全了，于是有\n\n<div>\n$$\nV = n + C_{n}^{4}\n$$\n</div>\n\n#### 求 \\\\(E\\\\)\n\n原有 \\\\(C_{n}^{2}\\\\) 条边，且圆环上的 \\\\(n\\\\) 个点互相连接构成 \\\\(n\\\\) 条边。\n\n每多一个交点会增加两条多边形边。又有 \\\\(2\\times C_{n}^{4}\\\\) 条。\n\n<div>\n$$\nE = n + C_{n}^{2} + 2\\times C_{n}^{4}\n$$\n</div>\n\n最后，我们展开这个逆天的柿子：\n\n<div>\n$$\n\\begin{aligned}\n\tF(n) &= E - V + 1 \\\\\n\t&= n + C_{n}^{2} + 2\\times C_{n}^{4} - n - C_{n}^{4} + 1 \\\\\n\t&= C_{n}^{2} + C_{n}^{4} + 1 \\\\\n\t&= \\dfrac{n(n - 1)}{2} + \\dfrac{n(n - 1)(n - 2)(n - 3)}{4\\times 3 \\times 2} + 1 \\\\\n\t&= \\dfrac{x^4}{24} - \\dfrac{x^3}{4} + \\dfrac{23x^2}{24} - \\dfrac{3x}{4} + 1\n\\end{aligned}\n$$\n</div>\n\n去 OEIS 上校验[结果](https://oeis.org/A000127 \"result\")，正确。\n","source":"_posts/P5377-THUPC2019-鸽鸽的分割-题解.md","raw":"---\ntitle: P5377 [THUPC2019] 鸽鸽的分割 题解\ndate: 2023-10-27 21:06:27\ncategories: OI\ntags:\n  - OI\ntoc: true\nkatex: true\n---\n### 简要题意\n\n连结圆上 \\\\(n\\\\) 个点，求最多能够把圆分成几个部分。\n\n<!-- more -->\n\n### 前置知识\n\n欧拉公式：\\\\(F(ace)=E(dge) - V(ertex)+2\\\\)\n\n人话：\\\\(\\text{多边形面数} = \\text{边数} - \\text{顶点数} + 2\\\\)\n\n### 思路\n\n将一个圆折叠成一个多面体，你可以进行一些奇妙的空间变换来达到这一点。\n\n那么我们最后会多出一个底面。\n\n因此在我们的这个圆中 \\\\(F(n)=E-V+1\\\\)\n\n#### 求 \\\\(V\\\\)\n\n圆上已经有了 \\\\(n\\\\) 个点。我们要使得圆内不存在三线共点的情况。\n\n那么考虑每次选择四个顶点画出一个四边形的两条对角线。\n\n于是又会生成 \\\\(C_{n}^{4}\\\\) 个顶点。可以证明已经考虑完全了，于是有\n\n<div>\n$$\nV = n + C_{n}^{4}\n$$\n</div>\n\n#### 求 \\\\(E\\\\)\n\n原有 \\\\(C_{n}^{2}\\\\) 条边，且圆环上的 \\\\(n\\\\) 个点互相连接构成 \\\\(n\\\\) 条边。\n\n每多一个交点会增加两条多边形边。又有 \\\\(2\\times C_{n}^{4}\\\\) 条。\n\n<div>\n$$\nE = n + C_{n}^{2} + 2\\times C_{n}^{4}\n$$\n</div>\n\n最后，我们展开这个逆天的柿子：\n\n<div>\n$$\n\\begin{aligned}\n\tF(n) &= E - V + 1 \\\\\n\t&= n + C_{n}^{2} + 2\\times C_{n}^{4} - n - C_{n}^{4} + 1 \\\\\n\t&= C_{n}^{2} + C_{n}^{4} + 1 \\\\\n\t&= \\dfrac{n(n - 1)}{2} + \\dfrac{n(n - 1)(n - 2)(n - 3)}{4\\times 3 \\times 2} + 1 \\\\\n\t&= \\dfrac{x^4}{24} - \\dfrac{x^3}{4} + \\dfrac{23x^2}{24} - \\dfrac{3x}{4} + 1\n\\end{aligned}\n$$\n</div>\n\n去 OEIS 上校验[结果](https://oeis.org/A000127 \"result\")，正确。\n","slug":"P5377-THUPC2019-鸽鸽的分割-题解","published":1,"updated":"2023-12-02T08:51:56.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpntrxha0001h87eaqim6r77","content":"<h3 id=\"简要题意\"><a href=\"#简要题意\" class=\"headerlink\" title=\"简要题意\"></a>简要题意</h3><p>连结圆上 \\(n\\) 个点，求最多能够把圆分成几个部分。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h3><p>欧拉公式：\\(F(ace)&#x3D;E(dge) - V(ertex)+2\\)</p>\n<p>人话：\\(\\text{多边形面数} &#x3D; \\text{边数} - \\text{顶点数} + 2\\)</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>将一个圆折叠成一个多面体，你可以进行一些奇妙的空间变换来达到这一点。</p>\n<p>那么我们最后会多出一个底面。</p>\n<p>因此在我们的这个圆中 \\(F(n)&#x3D;E-V+1\\)</p>\n<h4 id=\"求-V\"><a href=\"#求-V\" class=\"headerlink\" title=\"求 \\(V\\)\"></a>求 \\(V\\)</h4><p>圆上已经有了 \\(n\\) 个点。我们要使得圆内不存在三线共点的情况。</p>\n<p>那么考虑每次选择四个顶点画出一个四边形的两条对角线。</p>\n<p>于是又会生成 \\(C_{n}^{4}\\) 个顶点。可以证明已经考虑完全了，于是有</p>\n<div>\n$$\nV = n + C_{n}^{4}\n$$\n</div>\n\n<h4 id=\"求-E\"><a href=\"#求-E\" class=\"headerlink\" title=\"求 \\(E\\)\"></a>求 \\(E\\)</h4><p>原有 \\(C_{n}^{2}\\) 条边，且圆环上的 \\(n\\) 个点互相连接构成 \\(n\\) 条边。</p>\n<p>每多一个交点会增加两条多边形边。又有 \\(2\\times C_{n}^{4}\\) 条。</p>\n<div>\n$$\nE = n + C_{n}^{2} + 2\\times C_{n}^{4}\n$$\n</div>\n\n<p>最后，我们展开这个逆天的柿子：</p>\n<div>\n$$\n\\begin{aligned}\n    F(n) &= E - V + 1 \\\\\n    &= n + C_{n}^{2} + 2\\times C_{n}^{4} - n - C_{n}^{4} + 1 \\\\\n    &= C_{n}^{2} + C_{n}^{4} + 1 \\\\\n    &= \\dfrac{n(n - 1)}{2} + \\dfrac{n(n - 1)(n - 2)(n - 3)}{4\\times 3 \\times 2} + 1 \\\\\n    &= \\dfrac{x^4}{24} - \\dfrac{x^3}{4} + \\dfrac{23x^2}{24} - \\dfrac{3x}{4} + 1\n\\end{aligned}\n$$\n</div>\n\n<p>去 OEIS 上校验<a href=\"https://oeis.org/A000127\" title=\"result\">结果</a>，正确。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"简要题意\"><a href=\"#简要题意\" class=\"headerlink\" title=\"简要题意\"></a>简要题意</h3><p>连结圆上 \\(n\\) 个点，求最多能够把圆分成几个部分。</p>","more":"<h3 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h3><p>欧拉公式：\\(F(ace)&#x3D;E(dge) - V(ertex)+2\\)</p>\n<p>人话：\\(\\text{多边形面数} &#x3D; \\text{边数} - \\text{顶点数} + 2\\)</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>将一个圆折叠成一个多面体，你可以进行一些奇妙的空间变换来达到这一点。</p>\n<p>那么我们最后会多出一个底面。</p>\n<p>因此在我们的这个圆中 \\(F(n)&#x3D;E-V+1\\)</p>\n<h4 id=\"求-V\"><a href=\"#求-V\" class=\"headerlink\" title=\"求 \\(V\\)\"></a>求 \\(V\\)</h4><p>圆上已经有了 \\(n\\) 个点。我们要使得圆内不存在三线共点的情况。</p>\n<p>那么考虑每次选择四个顶点画出一个四边形的两条对角线。</p>\n<p>于是又会生成 \\(C_{n}^{4}\\) 个顶点。可以证明已经考虑完全了，于是有</p>\n<div>\n$$\nV = n + C_{n}^{4}\n$$\n</div>\n\n<h4 id=\"求-E\"><a href=\"#求-E\" class=\"headerlink\" title=\"求 \\(E\\)\"></a>求 \\(E\\)</h4><p>原有 \\(C_{n}^{2}\\) 条边，且圆环上的 \\(n\\) 个点互相连接构成 \\(n\\) 条边。</p>\n<p>每多一个交点会增加两条多边形边。又有 \\(2\\times C_{n}^{4}\\) 条。</p>\n<div>\n$$\nE = n + C_{n}^{2} + 2\\times C_{n}^{4}\n$$\n</div>\n\n<p>最后，我们展开这个逆天的柿子：</p>\n<div>\n$$\n\\begin{aligned}\n    F(n) &= E - V + 1 \\\\\n    &= n + C_{n}^{2} + 2\\times C_{n}^{4} - n - C_{n}^{4} + 1 \\\\\n    &= C_{n}^{2} + C_{n}^{4} + 1 \\\\\n    &= \\dfrac{n(n - 1)}{2} + \\dfrac{n(n - 1)(n - 2)(n - 3)}{4\\times 3 \\times 2} + 1 \\\\\n    &= \\dfrac{x^4}{24} - \\dfrac{x^3}{4} + \\dfrac{23x^2}{24} - \\dfrac{3x}{4} + 1\n\\end{aligned}\n$$\n</div>\n\n<p>去 OEIS 上校验<a href=\"https://oeis.org/A000127\" title=\"result\">结果</a>，正确。</p>"},{"title":"P9816 少项式复合幂 题解","date":"2023-10-29T11:50:48.000Z","cover":"/gallery/covers/20231029-2.jpg","toc":true,"_content":"### 简要题意\n\n称一个项数小于等于 \\\\(20\\\\) 的多项式为一个**少项式**。\n\n求一个少项式的 \\\\(y\\\\) 次复合函数在 \\\\(x\\\\) 点上 \\\\(f_{y}(x)\\bmod p\\\\) 的值。\n\n<!-- more -->\n\n### 解题思路\n\n题目强调注意 \\\\(m,p\\\\) 的范围，观察发现 \\\\(p\\\\) 的范围在 \\\\(10^5\\\\) 之内。\n\n关于模运算，它拥有以下显然的性质：\n\n<div>\n$$\n(x + y)\\bmod p = (x\\bmod p + y\\bmod p)\n$$\n</div>\n\n<div>\n$$\n(x \\times y)\\bmod p = ((x\\bmod p)\\times (y\\bmod p))\\bmod p\n$$\n</div>\n\n所以对于一个多项式函数有等式 \\\\(f(x) \\bmod p = f(x\\bmod p)\\bmod p\\\\) 存在。不明白的想想你的快速幂为什么对。\n\n<div>\n$$\nf(x)\\bmod p = \\sum_{i = 1}^{m} a_i x^{b_i} \\bmod p = \\sum_{i = 1}^{m} (a_i (x\\bmod p)^{b_i} \\bmod p) \\bmod p\n$$\n</div>\n\n如上柿我们可以用 \\\\(O(m\\log\\max\\{b\\})\\\\) 的时间预处理出所有 \\\\(0\\le x < p\\\\) 的 \\\\(f(x)\\bmod p\\\\) \\\\(O(1)\\\\) 地快速进行回答。\n\n然后应该初学者都能想到通过 \\\\(y\\\\) 次迭代求得 \\\\(f_y(x)\\bmod p\\\\) 关键在于将迭代的复杂度降低。\n\n考虑进行倍增，因为有 \\\\(f_{2^k}(x) = f_{2^{k - 1}}(f_{2^{k - 1}}(x))\\\\) \n\n令 \\\\(st_{x,k} = f_{2^k}(x)\\\\) 则我们可以通过 \\\\(O(\\log y)\\\\) 的迭代求得答案。\n\n<div>\n$$\nst_{x,k} = \n\\begin{cases}\n\tf(x)\\bmod p & k = 0 \\\\\n\tst_{st_{x,k - 1},k - 1} & \\mathrm{Otherwise.} \\\\\n\\end{cases}\n$$\n</div>\n\n需要注意的是，因为 \\\\(y\\le 10^7\\\\) 因此枚举 \\\\(k\\\\) 直到 \\\\(2^k > 10^7\\\\)。\n\n### 贴个代码\n\n这里令 \\\\(f_{x,k} = st_{x,k}\\\\)。\n\n```cpp\n#define rep(i, l, r) for (int i = (l); i <= (r); ++i)\nconstexpr int Y = 1e7 + 10;\n\nrep (i, 0, p - 1)\n    rep (j, 1, m)\n        f[i][0] = (f[i][0] + 1ll * a[j] * fpow(i, b[j]) % p) % p;\n\nfor (int j = 1; (1 << j) <= Y; ++j)\n    rep (i, 0, p - 1)\n        f[i][j] = f[f[i][j - 1]][j - 1];\n\nrep (i, 1, q)\n{\n    cin >> x >> y; x %= p;\n    for (int k = 30; ~k; --k)\n        if ((1 << k) & y) x = f[x][k];\n    cout << x << endl;\n}\n```\n","source":"_posts/P9816-少项式复合幂-题解.md","raw":"---\ntitle: P9816 少项式复合幂 题解\ndate: 2023-10-29 19:50:48\ncover: /gallery/covers/20231029-2.jpg\ncategories: OI\ntags:\n  - OI\ntoc: true\n---\n### 简要题意\n\n称一个项数小于等于 \\\\(20\\\\) 的多项式为一个**少项式**。\n\n求一个少项式的 \\\\(y\\\\) 次复合函数在 \\\\(x\\\\) 点上 \\\\(f_{y}(x)\\bmod p\\\\) 的值。\n\n<!-- more -->\n\n### 解题思路\n\n题目强调注意 \\\\(m,p\\\\) 的范围，观察发现 \\\\(p\\\\) 的范围在 \\\\(10^5\\\\) 之内。\n\n关于模运算，它拥有以下显然的性质：\n\n<div>\n$$\n(x + y)\\bmod p = (x\\bmod p + y\\bmod p)\n$$\n</div>\n\n<div>\n$$\n(x \\times y)\\bmod p = ((x\\bmod p)\\times (y\\bmod p))\\bmod p\n$$\n</div>\n\n所以对于一个多项式函数有等式 \\\\(f(x) \\bmod p = f(x\\bmod p)\\bmod p\\\\) 存在。不明白的想想你的快速幂为什么对。\n\n<div>\n$$\nf(x)\\bmod p = \\sum_{i = 1}^{m} a_i x^{b_i} \\bmod p = \\sum_{i = 1}^{m} (a_i (x\\bmod p)^{b_i} \\bmod p) \\bmod p\n$$\n</div>\n\n如上柿我们可以用 \\\\(O(m\\log\\max\\{b\\})\\\\) 的时间预处理出所有 \\\\(0\\le x < p\\\\) 的 \\\\(f(x)\\bmod p\\\\) \\\\(O(1)\\\\) 地快速进行回答。\n\n然后应该初学者都能想到通过 \\\\(y\\\\) 次迭代求得 \\\\(f_y(x)\\bmod p\\\\) 关键在于将迭代的复杂度降低。\n\n考虑进行倍增，因为有 \\\\(f_{2^k}(x) = f_{2^{k - 1}}(f_{2^{k - 1}}(x))\\\\) \n\n令 \\\\(st_{x,k} = f_{2^k}(x)\\\\) 则我们可以通过 \\\\(O(\\log y)\\\\) 的迭代求得答案。\n\n<div>\n$$\nst_{x,k} = \n\\begin{cases}\n\tf(x)\\bmod p & k = 0 \\\\\n\tst_{st_{x,k - 1},k - 1} & \\mathrm{Otherwise.} \\\\\n\\end{cases}\n$$\n</div>\n\n需要注意的是，因为 \\\\(y\\le 10^7\\\\) 因此枚举 \\\\(k\\\\) 直到 \\\\(2^k > 10^7\\\\)。\n\n### 贴个代码\n\n这里令 \\\\(f_{x,k} = st_{x,k}\\\\)。\n\n```cpp\n#define rep(i, l, r) for (int i = (l); i <= (r); ++i)\nconstexpr int Y = 1e7 + 10;\n\nrep (i, 0, p - 1)\n    rep (j, 1, m)\n        f[i][0] = (f[i][0] + 1ll * a[j] * fpow(i, b[j]) % p) % p;\n\nfor (int j = 1; (1 << j) <= Y; ++j)\n    rep (i, 0, p - 1)\n        f[i][j] = f[f[i][j - 1]][j - 1];\n\nrep (i, 1, q)\n{\n    cin >> x >> y; x %= p;\n    for (int k = 30; ~k; --k)\n        if ((1 << k) & y) x = f[x][k];\n    cout << x << endl;\n}\n```\n","slug":"P9816-少项式复合幂-题解","published":1,"updated":"2023-12-02T08:52:02.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpntrxhc0004h87e9hge7md6","content":"<h3 id=\"简要题意\"><a href=\"#简要题意\" class=\"headerlink\" title=\"简要题意\"></a>简要题意</h3><p>称一个项数小于等于 \\(20\\) 的多项式为一个<strong>少项式</strong>。</p>\n<p>求一个少项式的 \\(y\\) 次复合函数在 \\(x\\) 点上 \\(f_{y}(x)\\bmod p\\) 的值。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>题目强调注意 \\(m,p\\) 的范围，观察发现 \\(p\\) 的范围在 \\(10^5\\) 之内。</p>\n<p>关于模运算，它拥有以下显然的性质：</p>\n<div>\n$$\n(x + y)\\bmod p = (x\\bmod p + y\\bmod p)\n$$\n</div>\n\n<div>\n$$\n(x \\times y)\\bmod p = ((x\\bmod p)\\times (y\\bmod p))\\bmod p\n$$\n</div>\n\n<p>所以对于一个多项式函数有等式 \\(f(x) \\bmod p &#x3D; f(x\\bmod p)\\bmod p\\) 存在。不明白的想想你的快速幂为什么对。</p>\n<div>\n$$\nf(x)\\bmod p = \\sum_{i = 1}^{m} a_i x^{b_i} \\bmod p = \\sum_{i = 1}^{m} (a_i (x\\bmod p)^{b_i} \\bmod p) \\bmod p\n$$\n</div>\n\n<p>如上柿我们可以用 \\(O(m\\log\\max{b})\\) 的时间预处理出所有 \\(0\\le x &lt; p\\) 的 \\(f(x)\\bmod p\\) \\(O(1)\\) 地快速进行回答。</p>\n<p>然后应该初学者都能想到通过 \\(y\\) 次迭代求得 \\(f_y(x)\\bmod p\\) 关键在于将迭代的复杂度降低。</p>\n<p>考虑进行倍增，因为有 \\(f_{2^k}(x) &#x3D; f_{2^{k - 1}}(f_{2^{k - 1}}(x))\\) </p>\n<p>令 \\(st_{x,k} &#x3D; f_{2^k}(x)\\) 则我们可以通过 \\(O(\\log y)\\) 的迭代求得答案。</p>\n<div>\n$$\nst_{x,k} = \n\\begin{cases}\n    f(x)\\bmod p & k = 0 \\\\\n    st_{st_{x,k - 1},k - 1} & \\mathrm{Otherwise.} \\\\\n\\end{cases}\n$$\n</div>\n\n<p>需要注意的是，因为 \\(y\\le 10^7\\) 因此枚举 \\(k\\) 直到 \\(2^k &gt; 10^7\\)。</p>\n<h3 id=\"贴个代码\"><a href=\"#贴个代码\" class=\"headerlink\" title=\"贴个代码\"></a>贴个代码</h3><p>这里令 \\(f_{x,k} &#x3D; st_{x,k}\\)。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> rep(i, l, r) for (int i = (l); i &lt;= (r); ++i)</span></span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> Y = <span class=\"number\">1e7</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">rep</span> (i, <span class=\"number\">0</span>, p - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">rep</span> (j, <span class=\"number\">1</span>, m)</span><br><span class=\"line\">        f[i][<span class=\"number\">0</span>] = (f[i][<span class=\"number\">0</span>] + <span class=\"number\">1ll</span> * a[j] * <span class=\"built_in\">fpow</span>(i, b[j]) % p) % p;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; (<span class=\"number\">1</span> &lt;&lt; j) &lt;= Y; ++j)</span><br><span class=\"line\">    <span class=\"built_in\">rep</span> (i, <span class=\"number\">0</span>, p - <span class=\"number\">1</span>)</span><br><span class=\"line\">        f[i][j] = f[f[i][j - <span class=\"number\">1</span>]][j - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">rep</span> (i, <span class=\"number\">1</span>, q)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cin &gt;&gt; x &gt;&gt; y; x %= p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">30</span>; ~k; --k)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"number\">1</span> &lt;&lt; k) &amp; y) x = f[x][k];</span><br><span class=\"line\">    cout &lt;&lt; x &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"简要题意\"><a href=\"#简要题意\" class=\"headerlink\" title=\"简要题意\"></a>简要题意</h3><p>称一个项数小于等于 \\(20\\) 的多项式为一个<strong>少项式</strong>。</p>\n<p>求一个少项式的 \\(y\\) 次复合函数在 \\(x\\) 点上 \\(f_{y}(x)\\bmod p\\) 的值。</p>","more":"<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>题目强调注意 \\(m,p\\) 的范围，观察发现 \\(p\\) 的范围在 \\(10^5\\) 之内。</p>\n<p>关于模运算，它拥有以下显然的性质：</p>\n<div>\n$$\n(x + y)\\bmod p = (x\\bmod p + y\\bmod p)\n$$\n</div>\n\n<div>\n$$\n(x \\times y)\\bmod p = ((x\\bmod p)\\times (y\\bmod p))\\bmod p\n$$\n</div>\n\n<p>所以对于一个多项式函数有等式 \\(f(x) \\bmod p &#x3D; f(x\\bmod p)\\bmod p\\) 存在。不明白的想想你的快速幂为什么对。</p>\n<div>\n$$\nf(x)\\bmod p = \\sum_{i = 1}^{m} a_i x^{b_i} \\bmod p = \\sum_{i = 1}^{m} (a_i (x\\bmod p)^{b_i} \\bmod p) \\bmod p\n$$\n</div>\n\n<p>如上柿我们可以用 \\(O(m\\log\\max{b})\\) 的时间预处理出所有 \\(0\\le x &lt; p\\) 的 \\(f(x)\\bmod p\\) \\(O(1)\\) 地快速进行回答。</p>\n<p>然后应该初学者都能想到通过 \\(y\\) 次迭代求得 \\(f_y(x)\\bmod p\\) 关键在于将迭代的复杂度降低。</p>\n<p>考虑进行倍增，因为有 \\(f_{2^k}(x) &#x3D; f_{2^{k - 1}}(f_{2^{k - 1}}(x))\\) </p>\n<p>令 \\(st_{x,k} &#x3D; f_{2^k}(x)\\) 则我们可以通过 \\(O(\\log y)\\) 的迭代求得答案。</p>\n<div>\n$$\nst_{x,k} = \n\\begin{cases}\n    f(x)\\bmod p & k = 0 \\\\\n    st_{st_{x,k - 1},k - 1} & \\mathrm{Otherwise.} \\\\\n\\end{cases}\n$$\n</div>\n\n<p>需要注意的是，因为 \\(y\\le 10^7\\) 因此枚举 \\(k\\) 直到 \\(2^k &gt; 10^7\\)。</p>\n<h3 id=\"贴个代码\"><a href=\"#贴个代码\" class=\"headerlink\" title=\"贴个代码\"></a>贴个代码</h3><p>这里令 \\(f_{x,k} &#x3D; st_{x,k}\\)。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> rep(i, l, r) for (int i = (l); i &lt;= (r); ++i)</span></span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"type\">int</span> Y = <span class=\"number\">1e7</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">rep</span> (i, <span class=\"number\">0</span>, p - <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">rep</span> (j, <span class=\"number\">1</span>, m)</span><br><span class=\"line\">        f[i][<span class=\"number\">0</span>] = (f[i][<span class=\"number\">0</span>] + <span class=\"number\">1ll</span> * a[j] * <span class=\"built_in\">fpow</span>(i, b[j]) % p) % p;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; (<span class=\"number\">1</span> &lt;&lt; j) &lt;= Y; ++j)</span><br><span class=\"line\">    <span class=\"built_in\">rep</span> (i, <span class=\"number\">0</span>, p - <span class=\"number\">1</span>)</span><br><span class=\"line\">        f[i][j] = f[f[i][j - <span class=\"number\">1</span>]][j - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">rep</span> (i, <span class=\"number\">1</span>, q)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cin &gt;&gt; x &gt;&gt; y; x %= p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">30</span>; ~k; --k)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"number\">1</span> &lt;&lt; k) &amp; y) x = f[x][k];</span><br><span class=\"line\">    cout &lt;&lt; x &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"公式渲染压力测试","date":"2023-10-27T07:45:40.000Z","cover":"/gallery/covers/20231026.jpg","hidden":true,"toc":true,"katex":true,"_content":"# P8670 [蓝桥杯 2018 国 B] 矩阵求和 题解\n\n### 前置芝士 / 题目\n\n- \\\\(\\gcd\\\\) 的性质\n- 欧拉函数 \\\\(\\varphi\\\\) 及其性质\n\n前置题目：[P2398](https://www.luogu.com.cn/problem/P2398) GCD SUM。\n\n### 思路\n\n简要题意：求\n\n<div>\n$$\n\\sum_{i=1}^{n} \\sum_{j=1}^{n} \\gcd(i,j)^2\n$$\n</div>\n\n首先枚举暴力，肯定 T 飞，期望得分 [30pts](https://www.luogu.com.cn/record/106794470)。\n\n```cpp\n// #include <algorithm>\nfor (reg int i = 1; i <= n; ++i)\n    ans = (ans + (i * i) % mod) % mod;\nfor (reg int i = 2; i <= n; ++i)\n    for (reg int j = 1; j <= i - 1; ++j)\n        ans += 2 * __gcd(i, j) * __gcd(i, j);\n```\n\n不会用莫比乌斯反演，乱搞一下。\n类似的带 \\\\(\\gcd\\\\) 的结论：\n\n<div>\n$$\n\\begin{aligned}\n\\sum_{i=1}^{n} \\sum_{j=1}^{n} f\\left(\\gcd(i,j)\\right)\n&=\\sum_{d=1}^{n} d \\sum_{i=1}^{n} \\sum_{j=1}^{n} [f \\left( \\gcd(i, j) \\right)=d] \\\\\n&=\\sum_{d=1}^{n} f\\left(d\\right) \\sum_{i=1}^{n} \\sum_{j=1}^{n} [\\gcd(i, j)=d] \\\\\n&=\\sum_{d=1}^{n} f\\left(d\\right) \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} \\sum_{j=1}^{\\lfloor \\frac{n}{d} \\rfloor} [\\gcd(i, j)=1]\n\\end{aligned}\n$$\n</div>\n\n\\\\([\\gcd(i,j)=1]\\\\) 不就是两者互质么，那么来个欧拉函数解决问题。\n\n参考 [P2158](https://www.luogu.com.cn/problem/P2158) [SDOI2008] 仪仗队，排除掉重复计算。\n\n<div>\n$$\n\\begin{aligned}\n\\sum_{d=1}^{n} f\\left(d\\right) \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} \\sum_{j=1}^{\\lfloor \\frac{n}{d} \\rfloor} [\\gcd(i, j)=1]\n&=\\sum_{d=1}^{n} f\\left(d\\right) \\left( 2 \\times \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} \\varphi\\left(n\\right)-1 \\right)\n\\end{aligned}\n$$\n</div>\n\n有了这个结论就可以愉快的刷[多倍经验](https://www.luogu.com.cn/paste/kyn1fe72)了。\n\n### 贴个代码\n\n```cpp\ninline void Euler(i64 n)\n{\n\tphi[1] = 1;\n    for (reg int i = 2; i <= n; ++i)\n    {\n        if (!prime[i]) prime[++prime[0]] = i, phi[i] = i - 1;\n        for (reg int j = 1; j <= prime[0] && i * prime[j] <= n; ++j)\n        {\n            prime[i * prime[j]] = 1;\n            if (!(i % prime[j])) { \n            \t phi[i * prime[j]] = phi[i] * prime[j]; break; }\n            else phi[i * prime[j]] = phi[i] * phi[prime[j]];\n        }\n    }\n    for (reg int i = 1; i <= n; ++i)\n    \tphisum[i] = phisum[i - 1] + phi[i];\n}\n\nint main()\n{\n\tEuler(n);\n\tfor (reg i64 i = 1; i <= n; ++i)\n\t    ans = (ans + ((i * i) % mod) * ((phisum[n / i] * 2 - 1) % mod) % mod) % mod;\n}\n```\n","source":"_posts/公式渲染压力测试.md","raw":"---\ntitle: 公式渲染压力测试\ndate: 2023-10-27 15:45:40\ncover: /gallery/covers/20231026.jpg\ncategories: Test Pages\ntags:\n  - Test\nhidden: true\ntoc: true\nkatex: true\n---\n# P8670 [蓝桥杯 2018 国 B] 矩阵求和 题解\n\n### 前置芝士 / 题目\n\n- \\\\(\\gcd\\\\) 的性质\n- 欧拉函数 \\\\(\\varphi\\\\) 及其性质\n\n前置题目：[P2398](https://www.luogu.com.cn/problem/P2398) GCD SUM。\n\n### 思路\n\n简要题意：求\n\n<div>\n$$\n\\sum_{i=1}^{n} \\sum_{j=1}^{n} \\gcd(i,j)^2\n$$\n</div>\n\n首先枚举暴力，肯定 T 飞，期望得分 [30pts](https://www.luogu.com.cn/record/106794470)。\n\n```cpp\n// #include <algorithm>\nfor (reg int i = 1; i <= n; ++i)\n    ans = (ans + (i * i) % mod) % mod;\nfor (reg int i = 2; i <= n; ++i)\n    for (reg int j = 1; j <= i - 1; ++j)\n        ans += 2 * __gcd(i, j) * __gcd(i, j);\n```\n\n不会用莫比乌斯反演，乱搞一下。\n类似的带 \\\\(\\gcd\\\\) 的结论：\n\n<div>\n$$\n\\begin{aligned}\n\\sum_{i=1}^{n} \\sum_{j=1}^{n} f\\left(\\gcd(i,j)\\right)\n&=\\sum_{d=1}^{n} d \\sum_{i=1}^{n} \\sum_{j=1}^{n} [f \\left( \\gcd(i, j) \\right)=d] \\\\\n&=\\sum_{d=1}^{n} f\\left(d\\right) \\sum_{i=1}^{n} \\sum_{j=1}^{n} [\\gcd(i, j)=d] \\\\\n&=\\sum_{d=1}^{n} f\\left(d\\right) \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} \\sum_{j=1}^{\\lfloor \\frac{n}{d} \\rfloor} [\\gcd(i, j)=1]\n\\end{aligned}\n$$\n</div>\n\n\\\\([\\gcd(i,j)=1]\\\\) 不就是两者互质么，那么来个欧拉函数解决问题。\n\n参考 [P2158](https://www.luogu.com.cn/problem/P2158) [SDOI2008] 仪仗队，排除掉重复计算。\n\n<div>\n$$\n\\begin{aligned}\n\\sum_{d=1}^{n} f\\left(d\\right) \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} \\sum_{j=1}^{\\lfloor \\frac{n}{d} \\rfloor} [\\gcd(i, j)=1]\n&=\\sum_{d=1}^{n} f\\left(d\\right) \\left( 2 \\times \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} \\varphi\\left(n\\right)-1 \\right)\n\\end{aligned}\n$$\n</div>\n\n有了这个结论就可以愉快的刷[多倍经验](https://www.luogu.com.cn/paste/kyn1fe72)了。\n\n### 贴个代码\n\n```cpp\ninline void Euler(i64 n)\n{\n\tphi[1] = 1;\n    for (reg int i = 2; i <= n; ++i)\n    {\n        if (!prime[i]) prime[++prime[0]] = i, phi[i] = i - 1;\n        for (reg int j = 1; j <= prime[0] && i * prime[j] <= n; ++j)\n        {\n            prime[i * prime[j]] = 1;\n            if (!(i % prime[j])) { \n            \t phi[i * prime[j]] = phi[i] * prime[j]; break; }\n            else phi[i * prime[j]] = phi[i] * phi[prime[j]];\n        }\n    }\n    for (reg int i = 1; i <= n; ++i)\n    \tphisum[i] = phisum[i - 1] + phi[i];\n}\n\nint main()\n{\n\tEuler(n);\n\tfor (reg i64 i = 1; i <= n; ++i)\n\t    ans = (ans + ((i * i) % mod) * ((phisum[n / i] * 2 - 1) % mod) % mod) % mod;\n}\n```\n","slug":"公式渲染压力测试","published":1,"updated":"2023-11-29T08:35:55.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpntrxhc0005h87ebisz4t76","content":"<h1 id=\"P8670-蓝桥杯-2018-国-B-矩阵求和-题解\"><a href=\"#P8670-蓝桥杯-2018-国-B-矩阵求和-题解\" class=\"headerlink\" title=\"P8670 [蓝桥杯 2018 国 B] 矩阵求和 题解\"></a>P8670 [蓝桥杯 2018 国 B] 矩阵求和 题解</h1><h3 id=\"前置芝士-题目\"><a href=\"#前置芝士-题目\" class=\"headerlink\" title=\"前置芝士 &#x2F; 题目\"></a>前置芝士 &#x2F; 题目</h3><ul>\n<li>\\(\\gcd\\) 的性质</li>\n<li>欧拉函数 \\(\\varphi\\) 及其性质</li>\n</ul>\n<p>前置题目：<a href=\"https://www.luogu.com.cn/problem/P2398\">P2398</a> GCD SUM。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>简要题意：求</p>\n<div>\n$$\n\\sum_{i=1}^{n} \\sum_{j=1}^{n} \\gcd(i,j)^2\n$$\n</div>\n\n<p>首先枚举暴力，肯定 T 飞，期望得分 <a href=\"https://www.luogu.com.cn/record/106794470\">30pts</a>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// #include &lt;algorithm&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (reg <span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">    ans = (ans + (i * i) % mod) % mod;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (reg <span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (reg <span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= i - <span class=\"number\">1</span>; ++j)</span><br><span class=\"line\">        ans += <span class=\"number\">2</span> * __gcd(i, j) * __gcd(i, j);</span><br></pre></td></tr></table></figure>\n\n<p>不会用莫比乌斯反演，乱搞一下。<br>类似的带 \\(\\gcd\\) 的结论：</p>\n<div>\n$$\n\\begin{aligned}\n\\sum_{i=1}^{n} \\sum_{j=1}^{n} f\\left(\\gcd(i,j)\\right)\n&=\\sum_{d=1}^{n} d \\sum_{i=1}^{n} \\sum_{j=1}^{n} [f \\left( \\gcd(i, j) \\right)=d] \\\\\n&=\\sum_{d=1}^{n} f\\left(d\\right) \\sum_{i=1}^{n} \\sum_{j=1}^{n} [\\gcd(i, j)=d] \\\\\n&=\\sum_{d=1}^{n} f\\left(d\\right) \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} \\sum_{j=1}^{\\lfloor \\frac{n}{d} \\rfloor} [\\gcd(i, j)=1]\n\\end{aligned}\n$$\n</div>\n\n<p>\\([\\gcd(i,j)&#x3D;1]\\) 不就是两者互质么，那么来个欧拉函数解决问题。</p>\n<p>参考 <a href=\"https://www.luogu.com.cn/problem/P2158\">P2158</a> [SDOI2008] 仪仗队，排除掉重复计算。</p>\n<div>\n$$\n\\begin{aligned}\n\\sum_{d=1}^{n} f\\left(d\\right) \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} \\sum_{j=1}^{\\lfloor \\frac{n}{d} \\rfloor} [\\gcd(i, j)=1]\n&=\\sum_{d=1}^{n} f\\left(d\\right) \\left( 2 \\times \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} \\varphi\\left(n\\right)-1 \\right)\n\\end{aligned}\n$$\n</div>\n\n<p>有了这个结论就可以愉快的刷<a href=\"https://www.luogu.com.cn/paste/kyn1fe72\">多倍经验</a>了。</p>\n<h3 id=\"贴个代码\"><a href=\"#贴个代码\" class=\"headerlink\" title=\"贴个代码\"></a>贴个代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">Euler</span><span class=\"params\">(i64 n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tphi[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (reg <span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!prime[i]) prime[++prime[<span class=\"number\">0</span>]] = i, phi[i] = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (reg <span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= prime[<span class=\"number\">0</span>] &amp;&amp; i * prime[j] &lt;= n; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            prime[i * prime[j]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(i % prime[j])) &#123; </span><br><span class=\"line\">            \t phi[i * prime[j]] = phi[i] * prime[j]; <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> phi[i * prime[j]] = phi[i] * phi[prime[j]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (reg <span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">    \tphisum[i] = phisum[i - <span class=\"number\">1</span>] + phi[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">Euler</span>(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (reg i64 i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t    ans = (ans + ((i * i) % mod) * ((phisum[n / i] * <span class=\"number\">2</span> - <span class=\"number\">1</span>) % mod) % mod) % mod;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"","more":"<h1 id=\"P8670-蓝桥杯-2018-国-B-矩阵求和-题解\"><a href=\"#P8670-蓝桥杯-2018-国-B-矩阵求和-题解\" class=\"headerlink\" title=\"P8670 [蓝桥杯 2018 国 B] 矩阵求和 题解\"></a>P8670 [蓝桥杯 2018 国 B] 矩阵求和 题解</h1><h3 id=\"前置芝士-题目\"><a href=\"#前置芝士-题目\" class=\"headerlink\" title=\"前置芝士 &#x2F; 题目\"></a>前置芝士 &#x2F; 题目</h3><ul>\n<li>\\(\\gcd\\) 的性质</li>\n<li>欧拉函数 \\(\\varphi\\) 及其性质</li>\n</ul>\n<p>前置题目：<a href=\"https://www.luogu.com.cn/problem/P2398\">P2398</a> GCD SUM。</p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>简要题意：求</p>\n<div>\n$$\n\\sum_{i=1}^{n} \\sum_{j=1}^{n} \\gcd(i,j)^2\n$$\n</div>\n\n<p>首先枚举暴力，肯定 T 飞，期望得分 <a href=\"https://www.luogu.com.cn/record/106794470\">30pts</a>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// #include &lt;algorithm&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (reg <span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">    ans = (ans + (i * i) % mod) % mod;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (reg <span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (reg <span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= i - <span class=\"number\">1</span>; ++j)</span><br><span class=\"line\">        ans += <span class=\"number\">2</span> * __gcd(i, j) * __gcd(i, j);</span><br></pre></td></tr></table></figure>\n\n<p>不会用莫比乌斯反演，乱搞一下。<br>类似的带 \\(\\gcd\\) 的结论：</p>\n<div>\n$$\n\\begin{aligned}\n\\sum_{i=1}^{n} \\sum_{j=1}^{n} f\\left(\\gcd(i,j)\\right)\n&=\\sum_{d=1}^{n} d \\sum_{i=1}^{n} \\sum_{j=1}^{n} [f \\left( \\gcd(i, j) \\right)=d] \\\\\n&=\\sum_{d=1}^{n} f\\left(d\\right) \\sum_{i=1}^{n} \\sum_{j=1}^{n} [\\gcd(i, j)=d] \\\\\n&=\\sum_{d=1}^{n} f\\left(d\\right) \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} \\sum_{j=1}^{\\lfloor \\frac{n}{d} \\rfloor} [\\gcd(i, j)=1]\n\\end{aligned}\n$$\n</div>\n\n<p>\\([\\gcd(i,j)&#x3D;1]\\) 不就是两者互质么，那么来个欧拉函数解决问题。</p>\n<p>参考 <a href=\"https://www.luogu.com.cn/problem/P2158\">P2158</a> [SDOI2008] 仪仗队，排除掉重复计算。</p>\n<div>\n$$\n\\begin{aligned}\n\\sum_{d=1}^{n} f\\left(d\\right) \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} \\sum_{j=1}^{\\lfloor \\frac{n}{d} \\rfloor} [\\gcd(i, j)=1]\n&=\\sum_{d=1}^{n} f\\left(d\\right) \\left( 2 \\times \\sum_{i=1}^{\\lfloor \\frac{n}{d} \\rfloor} \\varphi\\left(n\\right)-1 \\right)\n\\end{aligned}\n$$\n</div>\n\n<p>有了这个结论就可以愉快的刷<a href=\"https://www.luogu.com.cn/paste/kyn1fe72\">多倍经验</a>了。</p>\n<h3 id=\"贴个代码\"><a href=\"#贴个代码\" class=\"headerlink\" title=\"贴个代码\"></a>贴个代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">Euler</span><span class=\"params\">(i64 n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tphi[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (reg <span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!prime[i]) prime[++prime[<span class=\"number\">0</span>]] = i, phi[i] = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (reg <span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= prime[<span class=\"number\">0</span>] &amp;&amp; i * prime[j] &lt;= n; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            prime[i * prime[j]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(i % prime[j])) &#123; </span><br><span class=\"line\">            \t phi[i * prime[j]] = phi[i] * prime[j]; <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> phi[i * prime[j]] = phi[i] * phi[prime[j]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (reg <span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">    \tphisum[i] = phisum[i - <span class=\"number\">1</span>] + phi[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">Euler</span>(n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (reg i64 i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t    ans = (ans + ((i * i) % mod) * ((phisum[n / i] * <span class=\"number\">2</span> - <span class=\"number\">1</span>) % mod) % mod) % mod;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Hello World","hidden":true,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncategories: Test Pages\ntags:\n  - Test\nhidden: true\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-11-29T07:50:50.413Z","updated":"2023-11-04T10:53:03.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpntrxhi000kh87e61uqaq46","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Test Article","date":"2023-10-26T12:19:31.000Z","hidden":true,"toc":true,"_content":"# First\n\n## Second\n\n### Third\n\n#### Fourth\n\n##### Fifth\n\n###### Sixth\n\n```cpp\n#include <iostream>\nusing namespace std;\nint main()\n{\n    cout << \"Love You\" << endl;\n    return 0;\n}\n```\n\n```python\nprint(\"Hello, Love from Yttr\")\n```\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/x3i7kkth.png)\n![](/img/kk.png)\n\n$f(x) = x^2+x+1$\n","source":"_posts/Test-Article.md","raw":"---\ntitle: Test Article\ndate: 2023-10-26 20:19:31\ncategories: Test Pages\ntags:\n  - Test\nhidden: true\ntoc: true\n---\n# First\n\n## Second\n\n### Third\n\n#### Fourth\n\n##### Fifth\n\n###### Sixth\n\n```cpp\n#include <iostream>\nusing namespace std;\nint main()\n{\n    cout << \"Love You\" << endl;\n    return 0;\n}\n```\n\n```python\nprint(\"Hello, Love from Yttr\")\n```\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/x3i7kkth.png)\n![](/img/kk.png)\n\n$f(x) = x^2+x+1$\n","slug":"Test-Article","published":1,"updated":"2023-11-04T10:53:25.707Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpntrxhj000lh87e0u2wcy10","content":"<h1 id=\"First\"><a href=\"#First\" class=\"headerlink\" title=\"First\"></a>First</h1><h2 id=\"Second\"><a href=\"#Second\" class=\"headerlink\" title=\"Second\"></a>Second</h2><h3 id=\"Third\"><a href=\"#Third\" class=\"headerlink\" title=\"Third\"></a>Third</h3><h4 id=\"Fourth\"><a href=\"#Fourth\" class=\"headerlink\" title=\"Fourth\"></a>Fourth</h4><h5 id=\"Fifth\"><a href=\"#Fifth\" class=\"headerlink\" title=\"Fifth\"></a>Fifth</h5><h6 id=\"Sixth\"><a href=\"#Sixth\" class=\"headerlink\" title=\"Sixth\"></a>Sixth</h6><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Love You&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello, Love from Yttr&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/x3i7kkth.png\"><br><img src=\"/img/kk.png\"></p>\n<p>$f(x) &#x3D; x^2+x+1$</p>\n<!-- flag of hidden posts -->","site":{"data":{}},"excerpt":"","more":"<h1 id=\"First\"><a href=\"#First\" class=\"headerlink\" title=\"First\"></a>First</h1><h2 id=\"Second\"><a href=\"#Second\" class=\"headerlink\" title=\"Second\"></a>Second</h2><h3 id=\"Third\"><a href=\"#Third\" class=\"headerlink\" title=\"Third\"></a>Third</h3><h4 id=\"Fourth\"><a href=\"#Fourth\" class=\"headerlink\" title=\"Fourth\"></a>Fourth</h4><h5 id=\"Fifth\"><a href=\"#Fifth\" class=\"headerlink\" title=\"Fifth\"></a>Fifth</h5><h6 id=\"Sixth\"><a href=\"#Sixth\" class=\"headerlink\" title=\"Sixth\"></a>Sixth</h6><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Love You&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello, Love from Yttr&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/x3i7kkth.png\"><br><img src=\"/img/kk.png\"></p>\n<p>$f(x) &#x3D; x^2+x+1$</p>\n"},{"title":"在随便哪一台电脑上写博客？Hexo 多端同步","date":"2023-11-04T03:00:11.000Z","cover":"/gallery/covers/20231102-2.jpg","toc":true,"_content":"将 Github 运用到底！\n\n<!-- more -->\n\n再来个奇妙小仓库还是太麻烦了，我们使用分支功能。\n\n### 启用同步\n\n在第一用户端的博客根目录下 Git Bash 新建一个仓库。\n\n```bash\ngit init\n```\n\n然后确保你的 `.gitignore` 文件里屏蔽了以下目录和文件的提交。\n\n```txt\n/.deploy_git  \n/public\n```\n\n添加该仓库到远程仓库列表：\n\n```bash\ngit remote add origin [your github repository]\n# 例如作者本人的:\n# git remote add origin git@github.com:YttriumWillow/yttriumwillow.github.io.git\n# 这是 SSH 模式下的提交，你的远程仓库 HTTPS 地址可能是这样\n# https://github.com/username/username.github.io.git\n```\n\n一路提交更改到 `hexo` 分支。\n\n```bash\ngit add . # 将变更添加到 git 暂存区  \ngit commit -m \"[comment]\" # 提交本次更改，并附加提交信息\ngit push origin main:hexo # 将本地 main 分支的提交发布到远程仓库的 hexo 分支\n# 我为了省事用的 main 主分支，有的仓库的默认分支可能是 master\n```\n\n你的 Github 仓库里面就会出现这个分支。\n\n![img](/img/20231104/your-github-displays.png)\n\n### 在其他设备上同步\n\n如果这是一台全新的设备， 请先安装 Git, Node.js 并更新 npm。\n\n打开你需要同步该文件的目录并启动终端。\n\n使用 Git 同步：\n\n```bash\ngit clone -b hexo [your github repository]\n```\n\n安装 hexo 依赖：\n\n```bash\nnpm install hexo-cli -g\nnpm install\nnpm install hexo-deployer-git # 这东西好像会同步到 package.json 但最好安装一下\n```\n\n已经同步完毕。使用 `hexo g / hexo s` 进行测试。\n\n更新博客前请先 pull 进行同步。\n\n```bash\ngit pull origin hexo\n```\n\n更新结束后提交修改。\n\n```bash\ngit add .  \ngit commit -m \"[comments]\" \ngit push origin main:hexo\n```\n\n你可以直接使用 bat 来做到一键完成这些功能。\n\n这样我们就可以在不同的设备上写 hexo 博客了。\n","source":"_posts/在随便哪一台电脑上写博客？Hexo-多端同步.md","raw":"---\ntitle: 在随便哪一台电脑上写博客？Hexo 多端同步\ndate: 2023-11-04 11:00:11\ncover: /gallery/covers/20231102-2.jpg\ncategories: 博客\ntags:\n  - 博客\ntoc: true\n---\n将 Github 运用到底！\n\n<!-- more -->\n\n再来个奇妙小仓库还是太麻烦了，我们使用分支功能。\n\n### 启用同步\n\n在第一用户端的博客根目录下 Git Bash 新建一个仓库。\n\n```bash\ngit init\n```\n\n然后确保你的 `.gitignore` 文件里屏蔽了以下目录和文件的提交。\n\n```txt\n/.deploy_git  \n/public\n```\n\n添加该仓库到远程仓库列表：\n\n```bash\ngit remote add origin [your github repository]\n# 例如作者本人的:\n# git remote add origin git@github.com:YttriumWillow/yttriumwillow.github.io.git\n# 这是 SSH 模式下的提交，你的远程仓库 HTTPS 地址可能是这样\n# https://github.com/username/username.github.io.git\n```\n\n一路提交更改到 `hexo` 分支。\n\n```bash\ngit add . # 将变更添加到 git 暂存区  \ngit commit -m \"[comment]\" # 提交本次更改，并附加提交信息\ngit push origin main:hexo # 将本地 main 分支的提交发布到远程仓库的 hexo 分支\n# 我为了省事用的 main 主分支，有的仓库的默认分支可能是 master\n```\n\n你的 Github 仓库里面就会出现这个分支。\n\n![img](/img/20231104/your-github-displays.png)\n\n### 在其他设备上同步\n\n如果这是一台全新的设备， 请先安装 Git, Node.js 并更新 npm。\n\n打开你需要同步该文件的目录并启动终端。\n\n使用 Git 同步：\n\n```bash\ngit clone -b hexo [your github repository]\n```\n\n安装 hexo 依赖：\n\n```bash\nnpm install hexo-cli -g\nnpm install\nnpm install hexo-deployer-git # 这东西好像会同步到 package.json 但最好安装一下\n```\n\n已经同步完毕。使用 `hexo g / hexo s` 进行测试。\n\n更新博客前请先 pull 进行同步。\n\n```bash\ngit pull origin hexo\n```\n\n更新结束后提交修改。\n\n```bash\ngit add .  \ngit commit -m \"[comments]\" \ngit push origin main:hexo\n```\n\n你可以直接使用 bat 来做到一键完成这些功能。\n\n这样我们就可以在不同的设备上写 hexo 博客了。\n","slug":"在随便哪一台电脑上写博客？Hexo-多端同步","published":1,"updated":"2023-12-02T08:52:08.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpntrxhj000nh87ehc6hfa75","content":"<p>将 Github 运用到底！</p>\n<span id=\"more\"></span>\n\n<p>再来个奇妙小仓库还是太麻烦了，我们使用分支功能。</p>\n<h3 id=\"启用同步\"><a href=\"#启用同步\" class=\"headerlink\" title=\"启用同步\"></a>启用同步</h3><p>在第一用户端的博客根目录下 Git Bash 新建一个仓库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<p>然后确保你的 <code>.gitignore</code> 文件里屏蔽了以下目录和文件的提交。</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/.deploy_git  </span><br><span class=\"line\">/public</span><br></pre></td></tr></table></figure>\n\n<p>添加该仓库到远程仓库列表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin [your github repository]</span><br><span class=\"line\"><span class=\"comment\"># 例如作者本人的:</span></span><br><span class=\"line\"><span class=\"comment\"># git remote add origin git@github.com:YttriumWillow/yttriumwillow.github.io.git</span></span><br><span class=\"line\"><span class=\"comment\"># 这是 SSH 模式下的提交，你的远程仓库 HTTPS 地址可能是这样</span></span><br><span class=\"line\"><span class=\"comment\"># https://github.com/username/username.github.io.git</span></span><br></pre></td></tr></table></figure>\n\n<p>一路提交更改到 <code>hexo</code> 分支。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . <span class=\"comment\"># 将变更添加到 git 暂存区  </span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;[comment]&quot;</span> <span class=\"comment\"># 提交本次更改，并附加提交信息</span></span><br><span class=\"line\">git push origin main:hexo <span class=\"comment\"># 将本地 main 分支的提交发布到远程仓库的 hexo 分支</span></span><br><span class=\"line\"><span class=\"comment\"># 我为了省事用的 main 主分支，有的仓库的默认分支可能是 master</span></span><br></pre></td></tr></table></figure>\n\n<p>你的 Github 仓库里面就会出现这个分支。</p>\n<p><img src=\"/img/20231104/your-github-displays.png\" alt=\"img\"></p>\n<h3 id=\"在其他设备上同步\"><a href=\"#在其他设备上同步\" class=\"headerlink\" title=\"在其他设备上同步\"></a>在其他设备上同步</h3><p>如果这是一台全新的设备， 请先安装 Git, Node.js 并更新 npm。</p>\n<p>打开你需要同步该文件的目录并启动终端。</p>\n<p>使用 Git 同步：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b hexo [your github repository]</span><br></pre></td></tr></table></figure>\n\n<p>安装 hexo 依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm install hexo-deployer-git <span class=\"comment\"># 这东西好像会同步到 package.json 但最好安装一下</span></span><br></pre></td></tr></table></figure>\n\n<p>已经同步完毕。使用 <code>hexo g / hexo s</code> 进行测试。</p>\n<p>更新博客前请先 pull 进行同步。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin hexo</span><br></pre></td></tr></table></figure>\n\n<p>更新结束后提交修改。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .  </span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;[comments]&quot;</span> </span><br><span class=\"line\">git push origin main:hexo</span><br></pre></td></tr></table></figure>\n\n<p>你可以直接使用 bat 来做到一键完成这些功能。</p>\n<p>这样我们就可以在不同的设备上写 hexo 博客了。</p>\n","site":{"data":{}},"excerpt":"<p>将 Github 运用到底！</p>","more":"<p>再来个奇妙小仓库还是太麻烦了，我们使用分支功能。</p>\n<h3 id=\"启用同步\"><a href=\"#启用同步\" class=\"headerlink\" title=\"启用同步\"></a>启用同步</h3><p>在第一用户端的博客根目录下 Git Bash 新建一个仓库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<p>然后确保你的 <code>.gitignore</code> 文件里屏蔽了以下目录和文件的提交。</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/.deploy_git  </span><br><span class=\"line\">/public</span><br></pre></td></tr></table></figure>\n\n<p>添加该仓库到远程仓库列表：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin [your github repository]</span><br><span class=\"line\"><span class=\"comment\"># 例如作者本人的:</span></span><br><span class=\"line\"><span class=\"comment\"># git remote add origin git@github.com:YttriumWillow/yttriumwillow.github.io.git</span></span><br><span class=\"line\"><span class=\"comment\"># 这是 SSH 模式下的提交，你的远程仓库 HTTPS 地址可能是这样</span></span><br><span class=\"line\"><span class=\"comment\"># https://github.com/username/username.github.io.git</span></span><br></pre></td></tr></table></figure>\n\n<p>一路提交更改到 <code>hexo</code> 分支。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . <span class=\"comment\"># 将变更添加到 git 暂存区  </span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;[comment]&quot;</span> <span class=\"comment\"># 提交本次更改，并附加提交信息</span></span><br><span class=\"line\">git push origin main:hexo <span class=\"comment\"># 将本地 main 分支的提交发布到远程仓库的 hexo 分支</span></span><br><span class=\"line\"><span class=\"comment\"># 我为了省事用的 main 主分支，有的仓库的默认分支可能是 master</span></span><br></pre></td></tr></table></figure>\n\n<p>你的 Github 仓库里面就会出现这个分支。</p>\n<p><img src=\"/img/20231104/your-github-displays.png\" alt=\"img\"></p>\n<h3 id=\"在其他设备上同步\"><a href=\"#在其他设备上同步\" class=\"headerlink\" title=\"在其他设备上同步\"></a>在其他设备上同步</h3><p>如果这是一台全新的设备， 请先安装 Git, Node.js 并更新 npm。</p>\n<p>打开你需要同步该文件的目录并启动终端。</p>\n<p>使用 Git 同步：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b hexo [your github repository]</span><br></pre></td></tr></table></figure>\n\n<p>安装 hexo 依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm install hexo-deployer-git <span class=\"comment\"># 这东西好像会同步到 package.json 但最好安装一下</span></span><br></pre></td></tr></table></figure>\n\n<p>已经同步完毕。使用 <code>hexo g / hexo s</code> 进行测试。</p>\n<p>更新博客前请先 pull 进行同步。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin hexo</span><br></pre></td></tr></table></figure>\n\n<p>更新结束后提交修改。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .  </span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;[comments]&quot;</span> </span><br><span class=\"line\">git push origin main:hexo</span><br></pre></td></tr></table></figure>\n\n<p>你可以直接使用 bat 来做到一键完成这些功能。</p>\n<p>这样我们就可以在不同的设备上写 hexo 博客了。</p>"},{"title":"通用快读快写模板","date":"2023-11-04T11:36:50.000Z","cover":"/gallery/covers/20231104-1.jpg","toc":true,"hidden":false,"_content":"**Use these templates after ```using namespace std;```**\n\n{% codeblock \"Update Info\" lang:cpp >folded %}\n// Forked from Matrix_mlt[498779]\n//  + Original (原生功能)\n//     + Functions\n//        + read()       // 2 Overloaded\n//        + readchar()   // Non-overloaded\n//        + write()      // Non-overloaded\n// Pull Request from fengziyi[540226]\n//  + Submitted (已追加功能)\n//     + Functions\n//        + readln()     // 2 Overloaded\n//        + writespace() // 2 Overloaded\n//        + writeln()    // 4 Overloaded\n//     + New Buffer Reader \n//  + RePacked\n//  + Unsubmitted (待完善)\n//     + Float Number Reading Functions\n//     + Big Interger Functions\n//     + ...\n{% endcodeblock %}\n\n<!-- more -->\n\n## Standard Version\n\n{% codeblock \"\" lang:cpp >folded %}\nnamespace IO\n{\n    #define reg register\n    template<typename _Tp>\n    inline void read(_Tp& x)\n    {\n        x = 0; char c = getchar(); bool f = 0;\n        while (!std::isdigit(c)) f |= c == 45, c = getchar();\n        while ( std::isdigit(c)) x = x * 10 + (c ^ 48), c = getchar();\n        return f ? x = -x : 1, void();\n    }\n    template<typename _Tp>\n    inline void write(_Tp x)\n    {\n        static char stk[40]; int top = 0;\n        if (!x)     return putchar(48), void();\n        if (x < 0)  putchar(45), x = -x;\n        while (x)   stk[top++] = x % 10, x /= 10;\n        while (top) putchar(stk[--top] + 48);\n    }\n    // read\n    template<typename _Tp, typename ...Args>\n    inline void read(_Tp& x, Args& ...args) { read(x), read(args...); }\n}\nusing namespace IO;\n{% endcodeblock %}\n\n## Extend Functions (Must be used with Std Ver)\n\n{% codeblock \"\" lang:cpp >folded %}\nnamespace ExtIO\n{\n    // readchar\n    inline void readchar(char& x) { for (x = getchar(); !std::isalpha(x); x = getchar()); }\n\n    // readln\n    template<typename _Tp, typename _Tpp>\n    inline void readln(_Tp a[], _Tpp w) { for (reg _Tpp i = 1; i <= w; ++i) read(a[i]); }\n    template<typename _Tp, typename _Tpp>\n    inline void readln(_Tp a[], _Tpp l, _Tpp r) { for (reg _Tpp i = l; i <= r; ++i) read(a[i]); }\n\n    // writespace\n    template<typename _Tp>\n    inline void writespace(_Tp x) { write(x); putchar(' '); }\n    template<typename _Tp, typename ...Args>\n    inline void writespace(_Tp& x, Args& ...args) { writespace(x), writespace(args...); }\n\n    // writeln\n    template<typename _Tp>\n    inline void writeln(_Tp x) { write(x); putchar('\\n'); }\n    template<typename _Tp, typename ...Args>\n    inline void writeln(_Tp& x, Args& ...args) { writespace(x), writespace(args...), putchar('\\n'); }\n    template<typename _Tp, typename _Tpp>\n    inline void writeln(_Tp a[], _Tpp w) { for (reg _Tpp i = 1; i <= w; ++i) writespace(a[i]); putchar('\\n'); }\n    template<typename _Tp, typename _Tpp>\n    inline void writeln(_Tp a[], _Tpp l, _Tpp r) { for (reg _Tpp i = l; i <= r; ++i) writespace(a[i]); putchar('\\n'); }\n};\nusing namespace ExtIO;\n{% endcodeblock %}\n\n## Special Buffer-Read Version\n## (Use ```flushout()``` at the end if ```writeln()``` is used)\n### 卡常用，高风险\n\n{% codeblock \"\" lang:cpp >folded %}\n#include <cstring>\nnamespace bufIO\n{\n    const int _Pu = 1 << 16;\n    const int _d = 32;\n    char buf[_Pu], obuf[_Pu];\n    char *inl = buf + _Pu, *inr = buf + _Pu;\n    char *outl = obuf, *outr = obuf + _Pu - _d;\n    inline void flushin()\n    {\n        memmove(buf, inl, inr - inl);\n        int rlen = fread(buf + (inr - inl), 1, inl - buf, stdin);\n        if (inl - rlen > buf) { buf[inr - inl + rlen] = EOF; }\n        inl = buf;\n    }\n    inline void flushout() { fwrite(obuf, outl - obuf, 1, stdout), outl = obuf; }\n    template <typename _Tp>\n    inline void read(_Tp &x)\n    {\n        if (inl + _d > inr) { flushin(); }\n        int isne = 0;\n        for (; !isdigit(*inl); ++inl) { isne = (*inl == '-'); }\n        x = (*inl++ - '0');\n        for (; isdigit(*inl); ++inl) { x = x * 10 + (*inl - '0'); }\n        if (isne) { x = -x; }\n    }\n    template <typename _Tp>\n    inline void writeln(_Tp x, char end = '\\n')\n    {\n        if (outl > outr) { flushout(); }\n        if (x < 0) { *outl++ = '-'; x = -x; }\n        char sta[20]; char *top = sta;\n        do { *top++ = (x % 10) + '0'; x /= 10; } while (x);\n        do { *outl++ = *--top; } while (top != sta);\n        (*outl++) = end;\n    }\n    template<typename _Tp, typename ...Args>\n    inline void read(_Tp& x, Args& ...args) { read(x), read(args...); }\n}\nusing namespace bufIO;\n{% endcodeblock %}","source":"_posts/通用快读快写模板.md","raw":"---\ntitle: 通用快读快写模板\ndate: 2023-11-04 19:36:50\ncover: /gallery/covers/20231104-1.jpg\ncategories: OI\ntoc: true\nhidden: false\ntags:\n  - OI\n---\n**Use these templates after ```using namespace std;```**\n\n{% codeblock \"Update Info\" lang:cpp >folded %}\n// Forked from Matrix_mlt[498779]\n//  + Original (原生功能)\n//     + Functions\n//        + read()       // 2 Overloaded\n//        + readchar()   // Non-overloaded\n//        + write()      // Non-overloaded\n// Pull Request from fengziyi[540226]\n//  + Submitted (已追加功能)\n//     + Functions\n//        + readln()     // 2 Overloaded\n//        + writespace() // 2 Overloaded\n//        + writeln()    // 4 Overloaded\n//     + New Buffer Reader \n//  + RePacked\n//  + Unsubmitted (待完善)\n//     + Float Number Reading Functions\n//     + Big Interger Functions\n//     + ...\n{% endcodeblock %}\n\n<!-- more -->\n\n## Standard Version\n\n{% codeblock \"\" lang:cpp >folded %}\nnamespace IO\n{\n    #define reg register\n    template<typename _Tp>\n    inline void read(_Tp& x)\n    {\n        x = 0; char c = getchar(); bool f = 0;\n        while (!std::isdigit(c)) f |= c == 45, c = getchar();\n        while ( std::isdigit(c)) x = x * 10 + (c ^ 48), c = getchar();\n        return f ? x = -x : 1, void();\n    }\n    template<typename _Tp>\n    inline void write(_Tp x)\n    {\n        static char stk[40]; int top = 0;\n        if (!x)     return putchar(48), void();\n        if (x < 0)  putchar(45), x = -x;\n        while (x)   stk[top++] = x % 10, x /= 10;\n        while (top) putchar(stk[--top] + 48);\n    }\n    // read\n    template<typename _Tp, typename ...Args>\n    inline void read(_Tp& x, Args& ...args) { read(x), read(args...); }\n}\nusing namespace IO;\n{% endcodeblock %}\n\n## Extend Functions (Must be used with Std Ver)\n\n{% codeblock \"\" lang:cpp >folded %}\nnamespace ExtIO\n{\n    // readchar\n    inline void readchar(char& x) { for (x = getchar(); !std::isalpha(x); x = getchar()); }\n\n    // readln\n    template<typename _Tp, typename _Tpp>\n    inline void readln(_Tp a[], _Tpp w) { for (reg _Tpp i = 1; i <= w; ++i) read(a[i]); }\n    template<typename _Tp, typename _Tpp>\n    inline void readln(_Tp a[], _Tpp l, _Tpp r) { for (reg _Tpp i = l; i <= r; ++i) read(a[i]); }\n\n    // writespace\n    template<typename _Tp>\n    inline void writespace(_Tp x) { write(x); putchar(' '); }\n    template<typename _Tp, typename ...Args>\n    inline void writespace(_Tp& x, Args& ...args) { writespace(x), writespace(args...); }\n\n    // writeln\n    template<typename _Tp>\n    inline void writeln(_Tp x) { write(x); putchar('\\n'); }\n    template<typename _Tp, typename ...Args>\n    inline void writeln(_Tp& x, Args& ...args) { writespace(x), writespace(args...), putchar('\\n'); }\n    template<typename _Tp, typename _Tpp>\n    inline void writeln(_Tp a[], _Tpp w) { for (reg _Tpp i = 1; i <= w; ++i) writespace(a[i]); putchar('\\n'); }\n    template<typename _Tp, typename _Tpp>\n    inline void writeln(_Tp a[], _Tpp l, _Tpp r) { for (reg _Tpp i = l; i <= r; ++i) writespace(a[i]); putchar('\\n'); }\n};\nusing namespace ExtIO;\n{% endcodeblock %}\n\n## Special Buffer-Read Version\n## (Use ```flushout()``` at the end if ```writeln()``` is used)\n### 卡常用，高风险\n\n{% codeblock \"\" lang:cpp >folded %}\n#include <cstring>\nnamespace bufIO\n{\n    const int _Pu = 1 << 16;\n    const int _d = 32;\n    char buf[_Pu], obuf[_Pu];\n    char *inl = buf + _Pu, *inr = buf + _Pu;\n    char *outl = obuf, *outr = obuf + _Pu - _d;\n    inline void flushin()\n    {\n        memmove(buf, inl, inr - inl);\n        int rlen = fread(buf + (inr - inl), 1, inl - buf, stdin);\n        if (inl - rlen > buf) { buf[inr - inl + rlen] = EOF; }\n        inl = buf;\n    }\n    inline void flushout() { fwrite(obuf, outl - obuf, 1, stdout), outl = obuf; }\n    template <typename _Tp>\n    inline void read(_Tp &x)\n    {\n        if (inl + _d > inr) { flushin(); }\n        int isne = 0;\n        for (; !isdigit(*inl); ++inl) { isne = (*inl == '-'); }\n        x = (*inl++ - '0');\n        for (; isdigit(*inl); ++inl) { x = x * 10 + (*inl - '0'); }\n        if (isne) { x = -x; }\n    }\n    template <typename _Tp>\n    inline void writeln(_Tp x, char end = '\\n')\n    {\n        if (outl > outr) { flushout(); }\n        if (x < 0) { *outl++ = '-'; x = -x; }\n        char sta[20]; char *top = sta;\n        do { *top++ = (x % 10) + '0'; x /= 10; } while (x);\n        do { *outl++ = *--top; } while (top != sta);\n        (*outl++) = end;\n    }\n    template<typename _Tp, typename ...Args>\n    inline void read(_Tp& x, Args& ...args) { read(x), read(args...); }\n}\nusing namespace bufIO;\n{% endcodeblock %}","slug":"通用快读快写模板","published":1,"updated":"2023-12-02T09:03:39.288Z","_id":"clpntrxhk000ph87e85bc98lv","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>Use these templates after <code>using namespace std;</code></strong></p>\n<figure class=\"highlight cpp\"><figcaption><span>Update Info >folded</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Forked from Matrix_mlt[498779]</span></span><br><span class=\"line\"><span class=\"comment\">//  + Original (原生功能)</span></span><br><span class=\"line\"><span class=\"comment\">//     + Functions</span></span><br><span class=\"line\"><span class=\"comment\">//        + read()       // 2 Overloaded</span></span><br><span class=\"line\"><span class=\"comment\">//        + readchar()   // Non-overloaded</span></span><br><span class=\"line\"><span class=\"comment\">//        + write()      // Non-overloaded</span></span><br><span class=\"line\"><span class=\"comment\">// Pull Request from fengziyi[540226]</span></span><br><span class=\"line\"><span class=\"comment\">//  + Submitted (已追加功能)</span></span><br><span class=\"line\"><span class=\"comment\">//     + Functions</span></span><br><span class=\"line\"><span class=\"comment\">//        + readln()     // 2 Overloaded</span></span><br><span class=\"line\"><span class=\"comment\">//        + writespace() // 2 Overloaded</span></span><br><span class=\"line\"><span class=\"comment\">//        + writeln()    // 4 Overloaded</span></span><br><span class=\"line\"><span class=\"comment\">//     + New Buffer Reader </span></span><br><span class=\"line\"><span class=\"comment\">//  + RePacked</span></span><br><span class=\"line\"><span class=\"comment\">//  + Unsubmitted (待完善)</span></span><br><span class=\"line\"><span class=\"comment\">//     + Float Number Reading Functions</span></span><br><span class=\"line\"><span class=\"comment\">//     + Big Interger Functions</span></span><br><span class=\"line\"><span class=\"comment\">//     + ...</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"Standard-Version\"><a href=\"#Standard-Version\" class=\"headerlink\" title=\"Standard Version\"></a>Standard Version</h2><figure class=\"highlight cpp\"><figcaption><span>>folded</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> IO</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">define</span> reg register</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(_Tp&amp; x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        x = <span class=\"number\">0</span>; <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>(); <span class=\"type\">bool</span> f = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!std::<span class=\"built_in\">isdigit</span>(c)) f |= c == <span class=\"number\">45</span>, c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( std::<span class=\"built_in\">isdigit</span>(c)) x = x * <span class=\"number\">10</span> + (c ^ <span class=\"number\">48</span>), c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f ? x = -x : <span class=\"number\">1</span>, <span class=\"built_in\">void</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">write</span><span class=\"params\">(_Tp x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">static</span> <span class=\"type\">char</span> stk[<span class=\"number\">40</span>]; <span class=\"type\">int</span> top = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!x)     <span class=\"keyword\">return</span> <span class=\"built_in\">putchar</span>(<span class=\"number\">48</span>), <span class=\"built_in\">void</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)  <span class=\"built_in\">putchar</span>(<span class=\"number\">45</span>), x = -x;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (x)   stk[top++] = x % <span class=\"number\">10</span>, x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (top) <span class=\"built_in\">putchar</span>(stk[--top] + <span class=\"number\">48</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// read</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp, <span class=\"keyword\">typename</span> ...Args&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(_Tp&amp; x, Args&amp; ...args)</span> </span>&#123; <span class=\"built_in\">read</span>(x), <span class=\"built_in\">read</span>(args...); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> IO;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Extend-Functions-Must-be-used-with-Std-Ver\"><a href=\"#Extend-Functions-Must-be-used-with-Std-Ver\" class=\"headerlink\" title=\"Extend Functions (Must be used with Std Ver)\"></a>Extend Functions (Must be used with Std Ver)</h2><figure class=\"highlight cpp\"><figcaption><span>>folded</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> ExtIO</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// readchar</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">readchar</span><span class=\"params\">(<span class=\"type\">char</span>&amp; x)</span> </span>&#123; <span class=\"keyword\">for</span> (x = <span class=\"built_in\">getchar</span>(); !std::<span class=\"built_in\">isalpha</span>(x); x = <span class=\"built_in\">getchar</span>()); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// readln</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp, <span class=\"keyword\">typename</span> _Tpp&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">readln</span><span class=\"params\">(_Tp a[], _Tpp w)</span> </span>&#123; <span class=\"keyword\">for</span> (reg _Tpp i = <span class=\"number\">1</span>; i &lt;= w; ++i) <span class=\"built_in\">read</span>(a[i]); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp, <span class=\"keyword\">typename</span> _Tpp&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">readln</span><span class=\"params\">(_Tp a[], _Tpp l, _Tpp r)</span> </span>&#123; <span class=\"keyword\">for</span> (reg _Tpp i = l; i &lt;= r; ++i) <span class=\"built_in\">read</span>(a[i]); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// writespace</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">writespace</span><span class=\"params\">(_Tp x)</span> </span>&#123; <span class=\"built_in\">write</span>(x); <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp, <span class=\"keyword\">typename</span> ...Args&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">writespace</span><span class=\"params\">(_Tp&amp; x, Args&amp; ...args)</span> </span>&#123; <span class=\"built_in\">writespace</span>(x), <span class=\"built_in\">writespace</span>(args...); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// writeln</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(_Tp x)</span> </span>&#123; <span class=\"built_in\">write</span>(x); <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp, <span class=\"keyword\">typename</span> ...Args&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(_Tp&amp; x, Args&amp; ...args)</span> </span>&#123; <span class=\"built_in\">writespace</span>(x), <span class=\"built_in\">writespace</span>(args...), <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp, <span class=\"keyword\">typename</span> _Tpp&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(_Tp a[], _Tpp w)</span> </span>&#123; <span class=\"keyword\">for</span> (reg _Tpp i = <span class=\"number\">1</span>; i &lt;= w; ++i) <span class=\"built_in\">writespace</span>(a[i]); <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp, <span class=\"keyword\">typename</span> _Tpp&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(_Tp a[], _Tpp l, _Tpp r)</span> </span>&#123; <span class=\"keyword\">for</span> (reg _Tpp i = l; i &lt;= r; ++i) <span class=\"built_in\">writespace</span>(a[i]); <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ExtIO;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Special-Buffer-Read-Version\"><a href=\"#Special-Buffer-Read-Version\" class=\"headerlink\" title=\"Special Buffer-Read Version\"></a>Special Buffer-Read Version</h2><h2 id=\"Use-flushout-at-the-end-if-writeln-is-used\"><a href=\"#Use-flushout-at-the-end-if-writeln-is-used\" class=\"headerlink\" title=\"(Use flushout() at the end if writeln() is used)\"></a>(Use <code>flushout()</code> at the end if <code>writeln()</code> is used)</h2><h3 id=\"卡常用，高风险\"><a href=\"#卡常用，高风险\" class=\"headerlink\" title=\"卡常用，高风险\"></a>卡常用，高风险</h3><figure class=\"highlight cpp\"><figcaption><span>>folded</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> bufIO</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> _Pu = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> _d = <span class=\"number\">32</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[_Pu], obuf[_Pu];</span><br><span class=\"line\">    <span class=\"type\">char</span> *inl = buf + _Pu, *inr = buf + _Pu;</span><br><span class=\"line\">    <span class=\"type\">char</span> *outl = obuf, *outr = obuf + _Pu - _d;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">flushin</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memmove</span>(buf, inl, inr - inl);</span><br><span class=\"line\">        <span class=\"type\">int</span> rlen = <span class=\"built_in\">fread</span>(buf + (inr - inl), <span class=\"number\">1</span>, inl - buf, stdin);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inl - rlen &gt; buf) &#123; buf[inr - inl + rlen] = EOF; &#125;</span><br><span class=\"line\">        inl = buf;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">flushout</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">fwrite</span>(obuf, outl - obuf, <span class=\"number\">1</span>, stdout), outl = obuf; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> _Tp&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(_Tp &amp;x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inl + _d &gt; inr) &#123; <span class=\"built_in\">flushin</span>(); &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> isne = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; !<span class=\"built_in\">isdigit</span>(*inl); ++inl) &#123; isne = (*inl == <span class=\"string\">&#x27;-&#x27;</span>); &#125;</span><br><span class=\"line\">        x = (*inl++ - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; <span class=\"built_in\">isdigit</span>(*inl); ++inl) &#123; x = x * <span class=\"number\">10</span> + (*inl - <span class=\"string\">&#x27;0&#x27;</span>); &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isne) &#123; x = -x; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> _Tp&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(_Tp x, <span class=\"type\">char</span> end = <span class=\"string\">&#x27;\\n&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (outl &gt; outr) &#123; <span class=\"built_in\">flushout</span>(); &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123; *outl++ = <span class=\"string\">&#x27;-&#x27;</span>; x = -x; &#125;</span><br><span class=\"line\">        <span class=\"type\">char</span> sta[<span class=\"number\">20</span>]; <span class=\"type\">char</span> *top = sta;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123; *top++ = (x % <span class=\"number\">10</span>) + <span class=\"string\">&#x27;0&#x27;</span>; x /= <span class=\"number\">10</span>; &#125; <span class=\"keyword\">while</span> (x);</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123; *outl++ = *--top; &#125; <span class=\"keyword\">while</span> (top != sta);</span><br><span class=\"line\">        (*outl++) = end;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp, <span class=\"keyword\">typename</span> ...Args&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(_Tp&amp; x, Args&amp; ...args)</span> </span>&#123; <span class=\"built_in\">read</span>(x), <span class=\"built_in\">read</span>(args...); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> bufIO;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><strong>Use these templates after <code>using namespace std;</code></strong></p>\n<figure class=\"highlight cpp\"><figcaption><span>Update Info >folded</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Forked from Matrix_mlt[498779]</span></span><br><span class=\"line\"><span class=\"comment\">//  + Original (原生功能)</span></span><br><span class=\"line\"><span class=\"comment\">//     + Functions</span></span><br><span class=\"line\"><span class=\"comment\">//        + read()       // 2 Overloaded</span></span><br><span class=\"line\"><span class=\"comment\">//        + readchar()   // Non-overloaded</span></span><br><span class=\"line\"><span class=\"comment\">//        + write()      // Non-overloaded</span></span><br><span class=\"line\"><span class=\"comment\">// Pull Request from fengziyi[540226]</span></span><br><span class=\"line\"><span class=\"comment\">//  + Submitted (已追加功能)</span></span><br><span class=\"line\"><span class=\"comment\">//     + Functions</span></span><br><span class=\"line\"><span class=\"comment\">//        + readln()     // 2 Overloaded</span></span><br><span class=\"line\"><span class=\"comment\">//        + writespace() // 2 Overloaded</span></span><br><span class=\"line\"><span class=\"comment\">//        + writeln()    // 4 Overloaded</span></span><br><span class=\"line\"><span class=\"comment\">//     + New Buffer Reader </span></span><br><span class=\"line\"><span class=\"comment\">//  + RePacked</span></span><br><span class=\"line\"><span class=\"comment\">//  + Unsubmitted (待完善)</span></span><br><span class=\"line\"><span class=\"comment\">//     + Float Number Reading Functions</span></span><br><span class=\"line\"><span class=\"comment\">//     + Big Interger Functions</span></span><br><span class=\"line\"><span class=\"comment\">//     + ...</span></span><br></pre></td></tr></table></figure>","more":"<h2 id=\"Standard-Version\"><a href=\"#Standard-Version\" class=\"headerlink\" title=\"Standard Version\"></a>Standard Version</h2><figure class=\"highlight cpp\"><figcaption><span>>folded</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> IO</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">define</span> reg register</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(_Tp&amp; x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        x = <span class=\"number\">0</span>; <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>(); <span class=\"type\">bool</span> f = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!std::<span class=\"built_in\">isdigit</span>(c)) f |= c == <span class=\"number\">45</span>, c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( std::<span class=\"built_in\">isdigit</span>(c)) x = x * <span class=\"number\">10</span> + (c ^ <span class=\"number\">48</span>), c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f ? x = -x : <span class=\"number\">1</span>, <span class=\"built_in\">void</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">write</span><span class=\"params\">(_Tp x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">static</span> <span class=\"type\">char</span> stk[<span class=\"number\">40</span>]; <span class=\"type\">int</span> top = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!x)     <span class=\"keyword\">return</span> <span class=\"built_in\">putchar</span>(<span class=\"number\">48</span>), <span class=\"built_in\">void</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)  <span class=\"built_in\">putchar</span>(<span class=\"number\">45</span>), x = -x;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (x)   stk[top++] = x % <span class=\"number\">10</span>, x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (top) <span class=\"built_in\">putchar</span>(stk[--top] + <span class=\"number\">48</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// read</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp, <span class=\"keyword\">typename</span> ...Args&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(_Tp&amp; x, Args&amp; ...args)</span> </span>&#123; <span class=\"built_in\">read</span>(x), <span class=\"built_in\">read</span>(args...); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> IO;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Extend-Functions-Must-be-used-with-Std-Ver\"><a href=\"#Extend-Functions-Must-be-used-with-Std-Ver\" class=\"headerlink\" title=\"Extend Functions (Must be used with Std Ver)\"></a>Extend Functions (Must be used with Std Ver)</h2><figure class=\"highlight cpp\"><figcaption><span>>folded</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> ExtIO</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// readchar</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">readchar</span><span class=\"params\">(<span class=\"type\">char</span>&amp; x)</span> </span>&#123; <span class=\"keyword\">for</span> (x = <span class=\"built_in\">getchar</span>(); !std::<span class=\"built_in\">isalpha</span>(x); x = <span class=\"built_in\">getchar</span>()); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// readln</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp, <span class=\"keyword\">typename</span> _Tpp&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">readln</span><span class=\"params\">(_Tp a[], _Tpp w)</span> </span>&#123; <span class=\"keyword\">for</span> (reg _Tpp i = <span class=\"number\">1</span>; i &lt;= w; ++i) <span class=\"built_in\">read</span>(a[i]); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp, <span class=\"keyword\">typename</span> _Tpp&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">readln</span><span class=\"params\">(_Tp a[], _Tpp l, _Tpp r)</span> </span>&#123; <span class=\"keyword\">for</span> (reg _Tpp i = l; i &lt;= r; ++i) <span class=\"built_in\">read</span>(a[i]); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// writespace</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">writespace</span><span class=\"params\">(_Tp x)</span> </span>&#123; <span class=\"built_in\">write</span>(x); <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp, <span class=\"keyword\">typename</span> ...Args&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">writespace</span><span class=\"params\">(_Tp&amp; x, Args&amp; ...args)</span> </span>&#123; <span class=\"built_in\">writespace</span>(x), <span class=\"built_in\">writespace</span>(args...); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// writeln</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(_Tp x)</span> </span>&#123; <span class=\"built_in\">write</span>(x); <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp, <span class=\"keyword\">typename</span> ...Args&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(_Tp&amp; x, Args&amp; ...args)</span> </span>&#123; <span class=\"built_in\">writespace</span>(x), <span class=\"built_in\">writespace</span>(args...), <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp, <span class=\"keyword\">typename</span> _Tpp&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(_Tp a[], _Tpp w)</span> </span>&#123; <span class=\"keyword\">for</span> (reg _Tpp i = <span class=\"number\">1</span>; i &lt;= w; ++i) <span class=\"built_in\">writespace</span>(a[i]); <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp, <span class=\"keyword\">typename</span> _Tpp&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(_Tp a[], _Tpp l, _Tpp r)</span> </span>&#123; <span class=\"keyword\">for</span> (reg _Tpp i = l; i &lt;= r; ++i) <span class=\"built_in\">writespace</span>(a[i]); <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> ExtIO;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Special-Buffer-Read-Version\"><a href=\"#Special-Buffer-Read-Version\" class=\"headerlink\" title=\"Special Buffer-Read Version\"></a>Special Buffer-Read Version</h2><h2 id=\"Use-flushout-at-the-end-if-writeln-is-used\"><a href=\"#Use-flushout-at-the-end-if-writeln-is-used\" class=\"headerlink\" title=\"(Use flushout() at the end if writeln() is used)\"></a>(Use <code>flushout()</code> at the end if <code>writeln()</code> is used)</h2><h3 id=\"卡常用，高风险\"><a href=\"#卡常用，高风险\" class=\"headerlink\" title=\"卡常用，高风险\"></a>卡常用，高风险</h3><figure class=\"highlight cpp\"><figcaption><span>>folded</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> bufIO</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> _Pu = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> _d = <span class=\"number\">32</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[_Pu], obuf[_Pu];</span><br><span class=\"line\">    <span class=\"type\">char</span> *inl = buf + _Pu, *inr = buf + _Pu;</span><br><span class=\"line\">    <span class=\"type\">char</span> *outl = obuf, *outr = obuf + _Pu - _d;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">flushin</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memmove</span>(buf, inl, inr - inl);</span><br><span class=\"line\">        <span class=\"type\">int</span> rlen = <span class=\"built_in\">fread</span>(buf + (inr - inl), <span class=\"number\">1</span>, inl - buf, stdin);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inl - rlen &gt; buf) &#123; buf[inr - inl + rlen] = EOF; &#125;</span><br><span class=\"line\">        inl = buf;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">flushout</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">fwrite</span>(obuf, outl - obuf, <span class=\"number\">1</span>, stdout), outl = obuf; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> _Tp&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(_Tp &amp;x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inl + _d &gt; inr) &#123; <span class=\"built_in\">flushin</span>(); &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> isne = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; !<span class=\"built_in\">isdigit</span>(*inl); ++inl) &#123; isne = (*inl == <span class=\"string\">&#x27;-&#x27;</span>); &#125;</span><br><span class=\"line\">        x = (*inl++ - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; <span class=\"built_in\">isdigit</span>(*inl); ++inl) &#123; x = x * <span class=\"number\">10</span> + (*inl - <span class=\"string\">&#x27;0&#x27;</span>); &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isne) &#123; x = -x; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> _Tp&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(_Tp x, <span class=\"type\">char</span> end = <span class=\"string\">&#x27;\\n&#x27;</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (outl &gt; outr) &#123; <span class=\"built_in\">flushout</span>(); &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) &#123; *outl++ = <span class=\"string\">&#x27;-&#x27;</span>; x = -x; &#125;</span><br><span class=\"line\">        <span class=\"type\">char</span> sta[<span class=\"number\">20</span>]; <span class=\"type\">char</span> *top = sta;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123; *top++ = (x % <span class=\"number\">10</span>) + <span class=\"string\">&#x27;0&#x27;</span>; x /= <span class=\"number\">10</span>; &#125; <span class=\"keyword\">while</span> (x);</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123; *outl++ = *--top; &#125; <span class=\"keyword\">while</span> (top != sta);</span><br><span class=\"line\">        (*outl++) = end;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Tp, <span class=\"keyword\">typename</span> ...Args&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(_Tp&amp; x, Args&amp; ...args)</span> </span>&#123; <span class=\"built_in\">read</span>(x), <span class=\"built_in\">read</span>(args...); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> bufIO;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"clpntrxh70000h87e8uj1gyr2","category_id":"clpntrxhb0002h87ef0ue3gjn","_id":"clpntrxhh000ah87edrzv0agp"},{"post_id":"clpntrxha0001h87eaqim6r77","category_id":"clpntrxhb0002h87ef0ue3gjn","_id":"clpntrxhh000eh87e3d5aclvq"},{"post_id":"clpntrxhc0004h87e9hge7md6","category_id":"clpntrxhb0002h87ef0ue3gjn","_id":"clpntrxhi000hh87e2xbdeaws"},{"post_id":"clpntrxhc0005h87ebisz4t76","category_id":"clpntrxhh000dh87e5x3vhkq6","_id":"clpntrxhi000jh87eegvdfe7i"},{"post_id":"clpntrxhi000kh87e61uqaq46","category_id":"clpntrxhh000dh87e5x3vhkq6","_id":"clpntrxhk000qh87e6v5v9av4"},{"post_id":"clpntrxhj000lh87e0u2wcy10","category_id":"clpntrxhh000dh87e5x3vhkq6","_id":"clpntrxhk000th87e4h2v4jlm"},{"post_id":"clpntrxhk000ph87e85bc98lv","category_id":"clpntrxhb0002h87ef0ue3gjn","_id":"clpntrxhk000vh87e8wt4d45h"},{"post_id":"clpntrxhj000nh87ehc6hfa75","category_id":"clpntrxhk000rh87e9mmmcqoz","_id":"clpntrxhl000xh87efevx8y2z"}],"PostTag":[{"post_id":"clpntrxh70000h87e8uj1gyr2","tag_id":"clpntrxhb0003h87efna7a5fi","_id":"clpntrxhg0008h87e7hhs7smy"},{"post_id":"clpntrxha0001h87eaqim6r77","tag_id":"clpntrxhb0003h87efna7a5fi","_id":"clpntrxhh000ch87efrjq0f9n"},{"post_id":"clpntrxhc0004h87e9hge7md6","tag_id":"clpntrxhb0003h87efna7a5fi","_id":"clpntrxhi000gh87ectwu1wso"},{"post_id":"clpntrxhc0005h87ebisz4t76","tag_id":"clpntrxhh000fh87e5kzv4b0s","_id":"clpntrxhi000ih87e7fryemzg"},{"post_id":"clpntrxhi000kh87e61uqaq46","tag_id":"clpntrxhh000fh87e5kzv4b0s","_id":"clpntrxhj000mh87e16ud1wh1"},{"post_id":"clpntrxhj000lh87e0u2wcy10","tag_id":"clpntrxhh000fh87e5kzv4b0s","_id":"clpntrxhk000oh87efyql9mj4"},{"post_id":"clpntrxhk000ph87e85bc98lv","tag_id":"clpntrxhb0003h87efna7a5fi","_id":"clpntrxhk000uh87ediye4ubq"},{"post_id":"clpntrxhj000nh87ehc6hfa75","tag_id":"clpntrxhk000sh87ehnergqym","_id":"clpntrxhl000wh87e6m02dlel"}],"Tag":[{"name":"OI","_id":"clpntrxhb0003h87efna7a5fi"},{"name":"Test","_id":"clpntrxhh000fh87e5kzv4b0s"},{"name":"博客","_id":"clpntrxhk000sh87ehnergqym"}]}}